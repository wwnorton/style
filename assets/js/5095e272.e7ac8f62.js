"use strict";(self.webpackChunkguides_website=self.webpackChunkguides_website||[]).push([[655],{5318:function(e,n,t){t.d(n,{Zo:function(){return c},kt:function(){return m}});var a=t(7378);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function r(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function l(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?r(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function i(e,n){if(null==e)return{};var t,a,o=function(e,n){if(null==e)return{};var t,a,o={},r=Object.keys(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var s=a.createContext({}),p=function(e){var n=a.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):l(l({},n),e)),t},c=function(e){var n=p(e.components);return a.createElement(s.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},d=a.forwardRef((function(e,n){var t=e.components,o=e.mdxType,r=e.originalType,s=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),d=p(t),m=o,h=d["".concat(s,".").concat(m)]||d[m]||u[m]||r;return t?a.createElement(h,l(l({ref:n},c),{},{components:t})):a.createElement(h,l({ref:n},c))}));function m(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var r=t.length,l=new Array(r);l[0]=d;var i={};for(var s in n)hasOwnProperty.call(n,s)&&(i[s]=n[s]);i.originalType=e,i.mdxType="string"==typeof e?e:o,l[1]=i;for(var p=2;p<r;p++)l[p]=t[p];return a.createElement.apply(null,l)}return a.createElement.apply(null,t)}d.displayName="MDXCreateElement"},7862:function(e,n,t){t.r(n),t.d(n,{frontMatter:function(){return i},contentTitle:function(){return s},metadata:function(){return p},toc:function(){return c},default:function(){return d}});var a=t(5773),o=t(808),r=(t(7378),t(5318)),l=["components"],i={slug:"javascript",title:"Javascript Style Guide",sidebar_label:"Javascript"},s=void 0,p={unversionedId:"javascript-style",id:"javascript-style",title:"Javascript Style Guide",description:"A guide for writing consistent and aesthetically pleasing JavaScript.",source:"@site/docs/javascript-style.md",sourceDirName:".",slug:"/javascript",permalink:"/style/docs/javascript",editUrl:"https://github.com/wwnorton/style/edit/main/guides-website/docs/javascript-style.md",tags:[],version:"current",lastUpdatedBy:"Evan Yamanishi",lastUpdatedAt:1645393293,formattedLastUpdatedAt:"2/20/2022",frontMatter:{slug:"javascript",title:"Javascript Style Guide",sidebar_label:"Javascript"},sidebar:"docs",previous:{title:"Introduction",permalink:"/style/docs/"},next:{title:"React",permalink:"/style/docs/react"}},c=[{value:"Formatting",id:"formatting",children:[{value:"Tabs for Indentation",id:"tabs-for-indentation",children:[],level:3},{value:"Newlines",id:"newlines",children:[],level:3},{value:"No trailing whitespace",id:"no-trailing-whitespace",children:[],level:3},{value:"Use semicolons",id:"use-semicolons",children:[],level:3},{value:"100 characters per line",id:"100-characters-per-line",children:[],level:3},{value:"Use single quotes",id:"use-single-quotes",children:[],level:3},{value:"Declare one variable per var statement",id:"declare-one-variable-per-var-statement",children:[],level:3}],level:2},{value:"Whitespace",id:"whitespace",children:[{value:"Use tabs",id:"use-tabs",children:[],level:3},{value:"Space Before Blocks",id:"space-before-blocks",children:[],level:3},{value:"Keyword Spacing",id:"keyword-spacing",children:[],level:3},{value:"Space Around Infix Operators",id:"space-around-infix-operators",children:[],level:3},{value:"End of File",id:"end-of-file",children:[],level:3},{value:"Chained Calls",id:"chained-calls",children:[],level:3},{value:"Padding",id:"padding",children:[{value:"Blank Lines",id:"blank-lines",children:[],level:4},{value:"Padded Blocks",id:"padded-blocks",children:[],level:4},{value:"No Multiple Blank Lines",id:"no-multiple-blank-lines",children:[],level:4}],level:3},{value:"Spacing",id:"spacing",children:[{value:"Parentheses Spacing",id:"parentheses-spacing",children:[],level:4},{value:"Inside Brackets",id:"inside-brackets",children:[],level:4},{value:"Inside Curly Braces",id:"inside-curly-braces",children:[],level:4},{value:"Max Length",id:"max-length",children:[],level:4},{value:"Block Spacing",id:"block-spacing",children:[],level:4},{value:"Comma Spacing",id:"comma-spacing",children:[],level:4},{value:"Computed Property Spacing",id:"computed-property-spacing",children:[],level:4},{value:"Function Spacing",id:"function-spacing",children:[],level:4},{value:"Key Spacing",id:"key-spacing",children:[],level:4},{value:"Trailing Spaces",id:"trailing-spaces",children:[],level:4},{value:"Multiple Empty Lines",id:"multiple-empty-lines",children:[],level:4}],level:3}],level:2},{value:"Types",id:"types",children:[{value:"Primitives",id:"primitives",children:[],level:3},{value:"Complex:",id:"complex",children:[],level:3}],level:2},{value:"References",id:"references",children:[{value:"Use <code>const</code> for all of your references:",id:"use-const-for-all-of-your-references",children:[],level:3},{value:"Use <code>let</code> instead of <code>var</code>.",id:"use-let-instead-of-var",children:[],level:3},{value:"Block Scoped",id:"block-scoped",children:[],level:3}],level:2},{value:"Objects",id:"objects",children:[{value:"No New Object",id:"no-new-object",children:[],level:3},{value:"Computed Property Names",id:"computed-property-names",children:[],level:3},{value:"Object Method Shorthand",id:"object-method-shorthand",children:[],level:3},{value:"Property Value Shorthand",id:"property-value-shorthand",children:[],level:3},{value:"Shorthand Property Grouping",id:"shorthand-property-grouping",children:[],level:3},{value:"Quote Props",id:"quote-props",children:[],level:3},{value:"<code>Object.prototype</code> Methods",id:"objectprototype-methods",children:[],level:3},{value:"Object Spread Operator",id:"object-spread-operator",children:[],level:3}],level:2},{value:"Arrays",id:"arrays",children:[{value:"No Array Constructor",id:"no-array-constructor",children:[],level:3},{value:"Use Arraypush",id:"use-arraypush",children:[],level:3},{value:"Array Spreads",id:"array-spreads",children:[{value:"Use Spreads for Iterable Object",id:"use-spreads-for-iterable-object",children:[],level:4}],level:3},{value:"Using Array.from",id:"using-arrayfrom",children:[{value:"Mapping over Iterables",id:"mapping-over-iterables",children:[],level:4}],level:3},{value:"Array Callback Return",id:"array-callback-return",children:[],level:3},{value:"Line Breaks for Array Brackets",id:"line-breaks-for-array-brackets",children:[],level:3}],level:2},{value:"Destructuring",id:"destructuring",children:[{value:"Use Object Destructuring",id:"use-object-destructuring",children:[],level:3},{value:"Use Array Destructuring",id:"use-array-destructuring",children:[],level:3},{value:"Multiple Return Values",id:"multiple-return-values",children:[],level:3}],level:2},{value:"Strings",id:"strings",children:[{value:"Single Quotes",id:"single-quotes",children:[],level:3},{value:"Broken Strings",id:"broken-strings",children:[],level:3},{value:"Prefer Template Strings",id:"prefer-template-strings",children:[],level:3},{value:"No Eval",id:"no-eval",children:[],level:3},{value:"No Useless Escapes",id:"no-useless-escapes",children:[],level:3}],level:2},{value:"Functions",id:"functions",children:[{value:"Function Style",id:"function-style",children:[],level:3},{value:"Wrap Immediately Invoked Functions",id:"wrap-immediately-invoked-functions",children:[],level:3},{value:"No Loop Functions",id:"no-loop-functions",children:[],level:3},{value:"A function declaration is not a statement.",id:"a-function-declaration-is-not-a-statement",children:[],level:3},{value:"Parameters and Arguments",id:"parameters-and-arguments",children:[{value:"<code>arguments</code>",id:"arguments",children:[],level:4},{value:"Prefer Rest Params",id:"prefer-rest-params",children:[],level:4},{value:"Default Parameter Syntax",id:"default-parameter-syntax",children:[],level:4},{value:"Parameter Side Effects",id:"parameter-side-effects",children:[],level:4},{value:"Default Parameters Last",id:"default-parameters-last",children:[],level:4},{value:"Never Mutate Parameters.",id:"never-mutate-parameters",children:[],level:4},{value:"Never Reassign Parameters.",id:"never-reassign-parameters",children:[],level:4}],level:3},{value:"No New Function",id:"no-new-function",children:[],level:3},{value:"Function Spacing",id:"function-spacing-1",children:[],level:3},{value:"Prefer Spread",id:"prefer-spread",children:[],level:3},{value:"Function Parentheses Newline",id:"function-parentheses-newline",children:[],level:3}],level:2},{value:"Arrow Functions",id:"arrow-functions",children:[{value:"Prefer Arrow Callback",id:"prefer-arrow-callback",children:[],level:3},{value:"Arrow Styling",id:"arrow-styling",children:[],level:3},{value:"Arrow Readability",id:"arrow-readability",children:[],level:3},{value:"Arrow Parentheses",id:"arrow-parentheses",children:[],level:3},{value:"No Confusing Arrow",id:"no-confusing-arrow",children:[],level:3},{value:"Implicit Arrow Linebreak",id:"implicit-arrow-linebreak",children:[],level:3}],level:2},{value:"Classes &amp; Constructors",id:"classes--constructors",children:[{value:"Class",id:"class",children:[],level:3},{value:"Extends",id:"extends",children:[],level:3},{value:"Method Chaining",id:"method-chaining",children:[],level:3},{value:"toString()",id:"tostring",children:[],level:3},{value:"No Useless Constructor",id:"no-useless-constructor",children:[],level:3},{value:"No Duplicate Class Members",id:"no-duplicate-class-members",children:[],level:3},{value:"Class Methods Use <code>this</code>",id:"class-methods-use-this",children:[],level:3}],level:2},{value:"Modules",id:"modules",children:[{value:"Import/Export",id:"importexport",children:[],level:3},{value:"Wildcards",id:"wildcards",children:[],level:3},{value:"Export From Import",id:"export-from-import",children:[],level:3},{value:"No Duplicate Imports",id:"no-duplicate-imports",children:[],level:3},{value:"Do Not Export Mutable Bindings.",id:"do-not-export-mutable-bindings",children:[],level:3},{value:"Named and Default Export",id:"named-and-default-export",children:[],level:3},{value:"Object Curly Newline",id:"object-curly-newline",children:[],level:3},{value:"No webpack Loader Syntax",id:"no-webpack-loader-syntax",children:[],level:3},{value:"No JS Filename Extensions",id:"no-js-filename-extensions",children:[],level:3}],level:2},{value:"Iterators and Generators",id:"iterators-and-generators",children:[{value:"Iterators",id:"iterators",children:[],level:3},{value:"Generators",id:"generators",children:[{value:"Generator Spacing",id:"generator-spacing",children:[],level:4}],level:3}],level:2},{value:"Properties",id:"properties",children:[{value:"Dot Notation",id:"dot-notation",children:[],level:3},{value:"Bracket Notation",id:"bracket-notation",children:[],level:3},{value:"No Restricted Properties",id:"no-restricted-properties",children:[],level:3}],level:2},{value:"Variables",id:"variables",children:[{value:"Use <code>const</code> and <code>let</code>",id:"use-const-and-let",children:[],level:3},{value:"One Variable",id:"one-variable",children:[],level:3},{value:"Grouping Variables",id:"grouping-variables",children:[],level:3},{value:"Reasonably Placed Variables",id:"reasonably-placed-variables",children:[],level:3},{value:"No Multi Assign",id:"no-multi-assign",children:[],level:3},{value:"No Unary Increments",id:"no-unary-increments",children:[],level:3},{value:"Operator Linebreak",id:"operator-linebreak",children:[],level:3},{value:"No Unused Variables",id:"no-unused-variables",children:[],level:3},{value:"Object / Array creation",id:"object--array-creation",children:[],level:3}],level:2},{value:"Hoisting",id:"hoisting",children:[{value:"<code>var</code>",id:"var",children:[],level:3},{value:"Anonymous Function Expressions",id:"anonymous-function-expressions",children:[],level:3},{value:"Named Function Expressions",id:"named-function-expressions",children:[],level:3},{value:"Function Declarations",id:"function-declarations",children:[],level:3}],level:2},{value:"Comparison Operators &amp; Equality",id:"comparison-operators--equality",children:[{value:"Equals",id:"equals",children:[],level:3},{value:"<code>if</code>",id:"if",children:[],level:3},{value:"Booleans, Strings and Numbers",id:"booleans-strings-and-numbers",children:[],level:3},{value:"More Info",id:"more-info",children:[],level:3},{value:"No Case Declarations",id:"no-case-declarations",children:[],level:3},{value:"Ternaries",id:"ternaries",children:[{value:"Unnecessary Ternaries",id:"unnecessary-ternaries",children:[],level:4}],level:3},{value:"Mixing Operators",id:"mixing-operators",children:[],level:3}],level:2},{value:"Blocks",id:"blocks",children:[{value:"Multiline Blocks",id:"multiline-blocks",children:[],level:3},{value:"Brace Style",id:"brace-style",children:[],level:3},{value:"No Else Return",id:"no-else-return",children:[],level:3}],level:2},{value:"Control Statements",id:"control-statements",children:[{value:"New Line Condition",id:"new-line-condition",children:[],level:3},{value:"Selection Operators",id:"selection-operators",children:[],level:3}],level:2},{value:"Comments",id:"comments",children:[{value:"Multiline Comments",id:"multiline-comments",children:[],level:3},{value:"Single Line Comments",id:"single-line-comments",children:[],level:3},{value:"Spaced Comment",id:"spaced-comment",children:[],level:3},{value:"<code>FIXME</code> or <code>TODO</code>",id:"fixme-or-todo",children:[{value:"Use <code>// FIXME:</code> to annotate problems.",id:"use--fixme-to-annotate-problems",children:[],level:4},{value:"Use <code>// TODO:</code> to annotate solutions to problems.",id:"use--todo-to-annotate-solutions-to-problems",children:[],level:4}],level:3}],level:2},{value:"Commas",id:"commas",children:[{value:"Leading commas: <strong>Nope.</strong>",id:"leading-commas-nope",children:[],level:3},{value:"Additional trailing comma: <strong>Yup.</strong>",id:"additional-trailing-comma-yup",children:[],level:3}],level:2},{value:"Semicolons",id:"semicolons",children:[{value:"<strong>Yup.</strong>",id:"yup",children:[],level:3}],level:2},{value:"Type Casting &amp; Coercion",id:"type-casting--coercion",children:[{value:"Type Coercion at Start",id:"type-coercion-at-start",children:[],level:3},{value:"Strings",id:"strings-1",children:[],level:3},{value:"Numbers",id:"numbers",children:[],level:3},{value:"<code>parseInt</code>",id:"parseint",children:[],level:3},{value:"Bitshift Operations",id:"bitshift-operations",children:[],level:3},{value:"Booleans",id:"booleans",children:[],level:3}],level:2},{value:"Naming Conventions",id:"naming-conventions",children:[{value:"Naming Length",id:"naming-length",children:[],level:3},{value:"camelCase",id:"camelcase",children:[{value:"camelCase Export Usage",id:"camelcase-export-usage",children:[],level:4},{value:"More camelCase Usage",id:"more-camelcase-usage",children:[],level:4}],level:3},{value:"PascalCase",id:"pascalcase",children:[{value:"PascalCase Export Usage",id:"pascalcase-export-usage",children:[],level:4}],level:3},{value:"No Underscore Dangle",id:"no-underscore-dangle",children:[],level:3},{value:"No <code>this</code> References",id:"no-this-references",children:[],level:3},{value:"Filename Export Matching",id:"filename-export-matching",children:[],level:3},{value:"Acronyms and Initialisms",id:"acronyms-and-initialisms",children:[],level:3},{value:"Optional UPPERCASE",id:"optional-uppercase",children:[{value:"Use UPPERCASE for Constants",id:"use-uppercase-for-constants",children:[],level:4}],level:3}],level:2},{value:"Accessors",id:"accessors",children:[{value:"Accessor Functions",id:"accessor-functions",children:[],level:3},{value:"Getters / Setters",id:"getters--setters",children:[],level:3},{value:"<code>boolean</code> Property",id:"boolean-property",children:[],level:3}],level:2},{value:"Events",id:"events",children:[{value:"Data Payloads",id:"data-payloads",children:[],level:3}],level:2},{value:"jQuery",id:"jquery",children:[{value:"jQuery Object Variables",id:"jquery-object-variables",children:[],level:3},{value:"Cache jQuery lookups.",id:"cache-jquery-lookups",children:[],level:3},{value:"DOM Queries",id:"dom-queries",children:[],level:3},{value:"Scoped jQuery Object Queries",id:"scoped-jquery-object-queries",children:[],level:3}],level:2},{value:"ECMAScript 5 Compatibility",id:"ecmascript-5-compatibility",children:[{value:"Kangax",id:"kangax",children:[],level:3}],level:2},{value:"ECMAScript 6+ (ES 2015+) Styles",id:"ecmascript-6-es-2015-styles",children:[{value:"ES6+ Features",id:"es6-features",children:[],level:3}],level:2},{value:"Standard Library",id:"standard-library",children:[{value:"<code>Number.isNaN</code>",id:"numberisnan",children:[],level:3},{value:"<code>Number.isFinite</code>",id:"numberisfinite",children:[],level:3}],level:2},{value:"Testing",id:"testing",children:[{value:"<strong>Yup.</strong>",id:"yup-1",children:[],level:3},{value:"<strong>No, but seriously</strong>:",id:"no-but-seriously",children:[],level:3}],level:2},{value:"Performance",id:"performance",children:[],level:2},{value:"Resources",id:"resources",children:[],level:2},{value:"Versioning",id:"versioning",children:[],level:2},{value:"Authors",id:"authors",children:[],level:2}],u={toc:c};function d(e){var n=e.components,t=(0,o.Z)(e,l);return(0,r.kt)("wrapper",(0,a.Z)({},u,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"A guide for writing consistent and aesthetically pleasing JavaScript.")),(0,r.kt)("p",null,"Inspired by other popular styles such as ",(0,r.kt)("a",{parentName:"p",href:"https://eslint.org/docs/rules/"},(0,r.kt)("inlineCode",{parentName:"a"},"eslint:recommended")),", and ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/airbnb/javascript/#airbnb-javascript-style-guide-"},"Airbnb"),"."),(0,r.kt)("h2",{id:"formatting"},"Formatting"),(0,r.kt)("h3",{id:"tabs-for-indentation"},"Tabs for Indentation"),(0,r.kt)("p",null,"Use tabs for indenting your code. With tabs users can choose their desired width. This has positive implications for accessibility and screenreaders, putting people in control of how they want to view the code."),(0,r.kt)("h3",{id:"newlines"},"Newlines"),(0,r.kt)("p",null,"Use UNIX-style newlines (",(0,r.kt)("inlineCode",{parentName:"p"},"\\n"),"), and a newline character as the last character of a file. Windows-style newlines (",(0,r.kt)("inlineCode",{parentName:"p"},"\\r\\n"),") are forbidden inside any repository."),(0,r.kt)("h3",{id:"no-trailing-whitespace"},"No trailing whitespace"),(0,r.kt)("p",null,"Always clean up any trailing whitespace in your .js files before committing."),(0,r.kt)("h3",{id:"use-semicolons"},"Use semicolons"),(0,r.kt)("p",null,"According to scientific research, the usage of semicolons is a core value of our community. Consider the points of the opposition, but be a traditionalist when it comes to abusing error correction mechanisms for cheap syntactic pleasures."),(0,r.kt)("h3",{id:"100-characters-per-line"},"100 characters per line"),(0,r.kt)("p",null,"Limit your lines to 100 characters."),(0,r.kt)("h3",{id:"use-single-quotes"},"Use single quotes"),(0,r.kt)("p",null,"Use single quotes, unless you are writing JSON. This helps you separate your objects' strings from normal strings."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"// bad \ud83d\udc4e\nvar foo = \"bad\";\n\n// good \ud83d\udc4d\nvar foo = 'bar';\n")),(0,r.kt)("p",null,"Opening braces go on the same line, Your opening braces go on the same line as the statement."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"// bad \ud83d\udc4e\nif (true)\n{\n    console.log('losing');\n}\n\n// good \ud83d\udc4d\nif (true) {\n    console.log('winning');\n}\n")),(0,r.kt)("p",null,"Also, notice the use of whitespace before and after the condition statement. What if you want to write 'else' or 'else if' along with your 'if'..."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"// bad \ud83d\udc4e\nif (true)\n{\n    console.log('losing');\n}\nelse if (false)\n{\n    console.log('this is bad');\n}\nelse\n{\n    console.log('not good');\n}\n\n// good \ud83d\udc4d\nif (true) {\n    console.log('winning');\n} else if (false) {\n    console.log('this is good');\n} else {\n    console.log('finally');\n}\n")),(0,r.kt)("h3",{id:"declare-one-variable-per-var-statement"},"Declare one variable per var statement"),(0,r.kt)("p",null,"Declare one variable per var statement, it makes it easier to re-order the lines."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"// bad \ud83d\udc4e\nvar keys = ['foo', 'bar'],\nvalues = [23, 42],\nobject = {},\nkey;\n\n// good \ud83d\udc4d\nvar keys = ['foo', 'bar'];\nvar values = [23, 42];\nvar object = {};\n")),(0,r.kt)("h2",{id:"whitespace"},"Whitespace"),(0,r.kt)("h3",{id:"use-tabs"},"Use tabs"),(0,r.kt)("p",null,"eslint: ",(0,r.kt)("a",{parentName:"p",href:"https://eslint.org/docs/rules/indent.html"},(0,r.kt)("inlineCode",{parentName:"a"},"indent"))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"// bad \ud83d\udc4e\nfunction foo() {\n\u2219\u2219let name;\n}\n\n// bad \ud83d\udc4e\nfunction bar() {\n\u2219let name;\n}\n\n// good \ud83d\udc4d\nfunction baz() {\n\u2219 let name;\n}\n")),(0,r.kt)("h3",{id:"space-before-blocks"},"Space Before Blocks"),(0,r.kt)("p",null,"Place 1 space before the leading brace."),(0,r.kt)("p",null,"eslint: ",(0,r.kt)("a",{parentName:"p",href:"https://eslint.org/docs/rules/space-before-blocks.html"},(0,r.kt)("inlineCode",{parentName:"a"},"space-before-blocks"))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"// bad \ud83d\udc4e\nfunction test(){\n    console.log('test');\n}\n\n// good \ud83d\udc4d\nfunction test() {\n    console.log('test');\n}\n\n// bad \ud83d\udc4e\ndog.set('attr',{\n    age: '1 year',\n    breed: 'Bernese Mountain Dog',\n});\n\n// good \ud83d\udc4d\ndog.set('attr', {\n    age: '1 year',\n    breed: 'Bernese Mountain Dog',\n});\n")),(0,r.kt)("h3",{id:"keyword-spacing"},"Keyword Spacing"),(0,r.kt)("p",null,"Place 1 space before the opening parenthesis in control statements (",(0,r.kt)("inlineCode",{parentName:"p"},"if"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"while")," etc.). Place no space between the argument list and the function name in function calls and declarations."),(0,r.kt)("p",null,"eslint: ",(0,r.kt)("a",{parentName:"p",href:"https://eslint.org/docs/rules/keyword-spacing.html"},(0,r.kt)("inlineCode",{parentName:"a"},"keyword-spacing"))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"// bad \ud83d\udc4e\nif(isJedi) {\n    fight ();\n}\n\n// good \ud83d\udc4d\nif (isJedi) {\n    fight();\n}\n\n// bad \ud83d\udc4e\nfunction fight () {\n    console.log ('Swooosh!');\n}\n\n// good \ud83d\udc4d\nfunction fight() {\n    console.log('Swooosh!');\n}\n")),(0,r.kt)("h3",{id:"space-around-infix-operators"},"Space Around Infix Operators"),(0,r.kt)("p",null,"Set off operators with spaces."),(0,r.kt)("p",null,"eslint: ",(0,r.kt)("a",{parentName:"p",href:"https://eslint.org/docs/rules/space-infix-ops.html"},(0,r.kt)("inlineCode",{parentName:"a"},"space-infix-ops"))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"// bad \ud83d\udc4e\nconst x=y+5;\n\n// good \ud83d\udc4d\nconst x = y + 5;\n")),(0,r.kt)("h3",{id:"end-of-file"},"End of File"),(0,r.kt)("p",null,"End files with a single newline character."),(0,r.kt)("p",null,"eslint: ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/eslint/eslint/blob/master/docs/rules/eol-last.md"},(0,r.kt)("inlineCode",{parentName:"a"},"eol-last"))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"// bad \ud83d\udc4e\nimport { es6 } from './AirbnbStyleGuide';\n    // ...\nexport default es6;\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"// bad \ud83d\udc4e\nimport { es6 } from './AirbnbStyleGuide';\n    // ...\nexport default es6;\u21b5\n\u21b5\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"// good \ud83d\udc4d\nimport { es6 } from './AirbnbStyleGuide';\n    // ...\nexport default es6;\u21b5\n")),(0,r.kt)("h3",{id:"chained-calls"},"Chained Calls"),(0,r.kt)("p",null,"Use indentation when making long method chains (more than 2 method chains). Use a leading dot, which emphasizes that the line is a method call, not a new statement."),(0,r.kt)("p",null,"eslint: ",(0,r.kt)("a",{parentName:"p",href:"https://eslint.org/docs/rules/newline-per-chained-call"},(0,r.kt)("inlineCode",{parentName:"a"},"newline-per-chained-call")),"\neslint: ",(0,r.kt)("a",{parentName:"p",href:"https://eslint.org/docs/rules/no-whitespace-before-property"},(0,r.kt)("inlineCode",{parentName:"a"},"no-whitespace-before-property"))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"// bad \ud83d\udc4e\n$('#items').find('.selected').highlight().end().find('.open').updateCount();\n\n// bad \ud83d\udc4e\n$('#items').\n  find('.selected').\n    highlight().\n    end().\n  find('.open').\n    updateCount();\n\n// good \ud83d\udc4d\n$('#items')\n  .find('.selected')\n    .highlight()\n    .end()\n  .find('.open')\n    .updateCount();\n\n// bad \ud83d\udc4e\nconst leds = stage.selectAll('.led').data(data).enter().append('svg:svg').classed('led', true)\n    .attr('width', (radius + margin) * 2).append('svg:g')\n    .attr('transform', `translate(${radius + margin},${radius + margin})`)\n    .call(tron.led);\n\n// good \ud83d\udc4d\nconst leds = stage.selectAll('.led')\n    .data(data)\n  .enter().append('svg:svg')\n    .classed('led', true)\n    .attr('width', (radius + margin) * 2)\n  .append('svg:g')\n    .attr('transform', `translate(${radius + margin},${radius + margin})`)\n    .call(tron.led);\n\n// good \ud83d\udc4d\nconst leds = stage.selectAll('.led').data(data);\n")),(0,r.kt)("h3",{id:"padding"},"Padding"),(0,r.kt)("h4",{id:"blank-lines"},"Blank Lines"),(0,r.kt)("p",null,"Leave a blank line after blocks and before the next statement."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"// bad \ud83d\udc4e\nif (foo) {\n  return bar;\n}\nreturn baz;\n\n// good \ud83d\udc4d\nif (foo) {\n  return bar;\n}\n\nreturn baz;\n\n// bad \ud83d\udc4e\nconst obj = {\n  foo() {\n  },\n  bar() {\n  },\n};\nreturn obj;\n\n// good \ud83d\udc4d\nconst obj = {\n  foo() {\n  },\n\n  bar() {\n  },\n};\n\nreturn obj;\n\n// bad \ud83d\udc4e\nconst arr = [\n  function foo() {\n  },\n  function bar() {\n  },\n];\nreturn arr;\n\n// good \ud83d\udc4d\nconst arr = [\n  function foo() {\n  },\n\n  function bar() {\n  },\n];\n\nreturn arr;\n")),(0,r.kt)("h4",{id:"padded-blocks"},"Padded Blocks"),(0,r.kt)("p",null,"Do not pad your blocks with blank lines."),(0,r.kt)("p",null,"eslint: ",(0,r.kt)("a",{parentName:"p",href:"https://eslint.org/docs/rules/padded-blocks.html"},(0,r.kt)("inlineCode",{parentName:"a"},"padded-blocks"))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"// bad \ud83d\udc4e\nfunction bar() {\n\n  console.log(foo);\n\n}\n\n// bad \ud83d\udc4e\nif (baz) {\n\n  console.log(qux);\n} else {\n  console.log(foo);\n\n}\n\n// bad \ud83d\udc4e\nclass Foo {\n\n  constructor(bar) {\n    this.bar = bar;\n  }\n}\n\n// good \ud83d\udc4d\nfunction bar() {\n  console.log(foo);\n}\n\n// good \ud83d\udc4d\nif (baz) {\n  console.log(qux);\n} else {\n  console.log(foo);\n}\n")),(0,r.kt)("h4",{id:"no-multiple-blank-lines"},"No Multiple Blank Lines"),(0,r.kt)("p",null,"Do not use multiple blank lines to pad your code."),(0,r.kt)("p",null,"eslint: ",(0,r.kt)("a",{parentName:"p",href:"https://eslint.org/docs/rules/no-multiple-empty-lines"},(0,r.kt)("inlineCode",{parentName:"a"},"no-multiple-empty-lines"))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"// bad \ud83d\udc4e\nclass Person {\n  constructor(fullName, email, birthday) {\n    this.fullName = fullName;\n\n\n    this.email = email;\n\n\n    this.setAge(birthday);\n  }\n\n\n  setAge(birthday) {\n    const today = new Date();\n\n\n    const age = this.getAge(today, birthday);\n\n\n    this.age = age;\n  }\n\n\n  getAge(today, birthday) {\n    // ..\n  }\n}\n\n// good \ud83d\udc4d\nclass Person {\n  constructor(fullName, email, birthday) {\n    this.fullName = fullName;\n    this.email = email;\n    this.setAge(birthday);\n  }\n\n  setAge(birthday) {\n    const today = new Date();\n    const age = getAge(today, birthday);\n    this.age = age;\n  }\n\n  getAge(today, birthday) {\n    // ..\n  }\n}\n")),(0,r.kt)("h3",{id:"spacing"},"Spacing"),(0,r.kt)("h4",{id:"parentheses-spacing"},"Parentheses Spacing"),(0,r.kt)("p",null,"Do not add spaces inside parentheses."),(0,r.kt)("p",null,"eslint: ",(0,r.kt)("a",{parentName:"p",href:"https://eslint.org/docs/rules/space-in-parens.html"},(0,r.kt)("inlineCode",{parentName:"a"},"space-in-parens"))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"// bad \ud83d\udc4e\nfunction bar( foo ) {\n  return foo;\n}\n\n// good \ud83d\udc4d\nfunction bar(foo) {\n  return foo;\n}\n\n// bad \ud83d\udc4e\nif ( foo ) {\n  console.log(foo);\n}\n\n// good \ud83d\udc4d\nif (foo) {\n  console.log(foo);\n}\n")),(0,r.kt)("h4",{id:"inside-brackets"},"Inside Brackets"),(0,r.kt)("p",null,"Do not add spaces inside brackets."),(0,r.kt)("p",null,"eslint: ",(0,r.kt)("a",{parentName:"p",href:"https://eslint.org/docs/rules/array-bracket-spacing.html"},(0,r.kt)("inlineCode",{parentName:"a"},"array-bracket-spacing"))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"// bad \ud83d\udc4e\nconst foo = [ 1, 2, 3 ];\nconsole.log(foo[ 0 ]);\n\n// good \ud83d\udc4d\nconst foo = [1, 2, 3];\nconsole.log(foo[0]);\n")),(0,r.kt)("h4",{id:"inside-curly-braces"},"Inside Curly Braces"),(0,r.kt)("p",null,"Add spaces inside curly braces."),(0,r.kt)("p",null,"eslint: ",(0,r.kt)("a",{parentName:"p",href:"https://eslint.org/docs/rules/object-curly-spacing.html"},(0,r.kt)("inlineCode",{parentName:"a"},"object-curly-spacing"))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"// bad \ud83d\udc4e\nconst foo = {clark: 'kent'};\n\n// good \ud83d\udc4d\nconst foo = { clark: 'kent' };\n")),(0,r.kt)("h4",{id:"max-length"},"Max Length"),(0,r.kt)("p",null,"Avoid having lines of code that are longer than 100 characters (including whitespace). Note: long strings are exempt from this rule, and should not be broken up."),(0,r.kt)("p",null,"eslint: ",(0,r.kt)("a",{parentName:"p",href:"https://eslint.org/docs/rules/max-len.html"},(0,r.kt)("inlineCode",{parentName:"a"},"max-len"))),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"Why? This ensures readability and maintainability.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"// bad \ud83d\udc4e\nconst foo = jsonData && jsonData.foo && jsonData.foo.bar && jsonData.foo.bar.baz && jsonData.foo.bar.baz.quux && jsonData.foo.bar.baz.quux.xyzzy;\n\n// bad \ud83d\udc4e\n$.ajax({ method: 'POST', url: 'https://airbnb.com/', data: { name: 'John' } }).done(() => console.log('Congratulations!')).fail(() => console.log('You have failed this city.'));\n\n// good \ud83d\udc4d\nconst foo = jsonData\n  && jsonData.foo\n  && jsonData.foo.bar\n  && jsonData.foo.bar.baz\n  && jsonData.foo.bar.baz.quux\n  && jsonData.foo.bar.baz.quux.xyzzy;\n\n// good \ud83d\udc4d\n$.ajax({\n  method: 'POST',\n  url: 'https://airbnb.com/',\n  data: { name: 'John' },\n})\n  .done(() => console.log('Congratulations!'))\n  .fail(() => console.log('You have failed this city.'));\n")),(0,r.kt)("h4",{id:"block-spacing"},"Block Spacing"),(0,r.kt)("p",null,"Require consistent spacing inside an open block token and the next token on the same line. This rule also enforces consistent spacing inside a close block token and previous token on the same line."),(0,r.kt)("p",null,"eslint: ",(0,r.kt)("a",{parentName:"p",href:"https://eslint.org/docs/rules/block-spacing"},(0,r.kt)("inlineCode",{parentName:"a"},"block-spacing"))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"// bad \ud83d\udc4e\nfunction foo() {return true;}\nif (foo) { bar = 0;}\n\n// good \ud83d\udc4d\nfunction foo() { return true; }\nif (foo) { bar = 0; }\n")),(0,r.kt)("h4",{id:"comma-spacing"},"Comma Spacing"),(0,r.kt)("p",null,"Avoid spaces before commas and require a space after commas."),(0,r.kt)("p",null,"eslint: ",(0,r.kt)("a",{parentName:"p",href:"https://eslint.org/docs/rules/comma-spacing"},(0,r.kt)("inlineCode",{parentName:"a"},"comma-spacing"))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"// bad \ud83d\udc4e\nvar foo = 1,bar = 2;\nvar arr = [1 , 2];\n\n// good \ud83d\udc4d\nvar foo = 1, bar = 2;\nvar arr = [1, 2];\n")),(0,r.kt)("h4",{id:"computed-property-spacing"},"Computed Property Spacing"),(0,r.kt)("p",null,"Enforce spacing inside of computed property brackets."),(0,r.kt)("p",null,"eslint: ",(0,r.kt)("a",{parentName:"p",href:"https://eslint.org/docs/rules/computed-property-spacing"},(0,r.kt)("inlineCode",{parentName:"a"},"computed-property-spacing"))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"// bad \ud83d\udc4e\nobj[foo ]\nobj[ 'foo']\nvar x = {[ b ]: a}\nobj[foo[ bar ]]\n\n// good \ud83d\udc4d\nobj[foo]\nobj['foo']\nvar x = { [b]: a }\nobj[foo[bar]]\n")),(0,r.kt)("h4",{id:"function-spacing"},"Function Spacing"),(0,r.kt)("p",null,"Avoid spaces between functions and their invocations."),(0,r.kt)("p",null,"eslint: ",(0,r.kt)("a",{parentName:"p",href:"https://eslint.org/docs/rules/func-call-spacing"},(0,r.kt)("inlineCode",{parentName:"a"},"func-call-spacing"))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"// bad \ud83d\udc4e\nfunc ();\n\nfunc\n();\n\n// good \ud83d\udc4d\nfunc();\n")),(0,r.kt)("h4",{id:"key-spacing"},"Key Spacing"),(0,r.kt)("p",null,"Enforce spacing between keys and values in object literal properties."),(0,r.kt)("p",null,"eslint: ",(0,r.kt)("a",{parentName:"p",href:"https://eslint.org/docs/rules/key-spacing"},(0,r.kt)("inlineCode",{parentName:"a"},"key-spacing"))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"// bad \ud83d\udc4e\nvar obj = { foo : 42 };\nvar obj2 = { foo:42 };\n\n// good \ud83d\udc4d\nvar obj = { foo: 42 };\n")),(0,r.kt)("h4",{id:"trailing-spaces"},"Trailing Spaces"),(0,r.kt)("p",null,"Avoid trailing spaces at the end of lines."),(0,r.kt)("p",null,"eslint: ",(0,r.kt)("a",{parentName:"p",href:"https://eslint.org/docs/rules/no-trailing-spaces"},(0,r.kt)("inlineCode",{parentName:"a"},"no-trailing-spaces"))),(0,r.kt)("h4",{id:"multiple-empty-lines"},"Multiple Empty Lines"),(0,r.kt)("p",null,"Avoid multiple empty lines, only allow one newline at the end of files, and avoid a newline at the beginning of files."),(0,r.kt)("p",null,"eslint: ",(0,r.kt)("a",{parentName:"p",href:"https://eslint.org/docs/rules/no-multiple-empty-lines"},(0,r.kt)("inlineCode",{parentName:"a"},"no-multiple-empty-lines"))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"// bad \ud83d\udc4e - multiple empty lines\nvar x = 1;\n\n\nvar y = 2;\n\n// bad \ud83d\udc4e - 2+ newlines at end of file\nvar x = 1;\nvar y = 2;\n\n\n// bad \ud83d\udc4e - 1+ newline(s) at beginning of file\n\nvar x = 1;\nvar y = 2;\n\n// good \ud83d\udc4d\nvar x = 1;\nvar y = 2;\n")),(0,r.kt)("h2",{id:"types"},"Types"),(0,r.kt)("h3",{id:"primitives"},"Primitives"),(0,r.kt)("p",null,"When you access a primitive type you work directly on its value."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"string")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"number")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"boolean")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"null")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"undefined")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"symbol")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"bigint"))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"const foo = 1;\nlet bar = foo;\n\nbar = 9;\n\nconsole.log(foo, bar); // => 1, 9\n")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Symbols and BigInts cannot be faithfully polyfilled, so they should not be used when targeting browsers/environments that don't support them natively.")),(0,r.kt)("h3",{id:"complex"},"Complex:"),(0,r.kt)("p",null,"When you access a complex type you work on a reference to its value."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"object")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"array")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"function"))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"const foo = [1, 2];\nconst bar = foo;\n\nbar[0] = 9;\n\nconsole.log(foo[0], bar[0]); // => 9, 9\n")),(0,r.kt)("h2",{id:"references"},"References"),(0,r.kt)("h3",{id:"use-const-for-all-of-your-references"},"Use ",(0,r.kt)("inlineCode",{parentName:"h3"},"const")," for all of your references:"),(0,r.kt)("p",null,"avoid using ",(0,r.kt)("inlineCode",{parentName:"p"},"var"),". eslint: ",(0,r.kt)("a",{parentName:"p",href:"https://eslint.org/docs/rules/prefer-const.html"},(0,r.kt)("inlineCode",{parentName:"a"},"prefer-const")),", ",(0,r.kt)("a",{parentName:"p",href:"https://eslint.org/docs/rules/no-const-assign.html"},(0,r.kt)("inlineCode",{parentName:"a"},"no-const-assign"))),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"IMPORTANCE: This ensures that you can't reassign your references, which can lead to bugs and difficult to comprehend code.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"// bad \ud83d\udc4e\nvar a = 1;\nvar b = 2;\n\n// good \ud83d\udc4d\nconst a = 1;\nconst b = 2;\n")),(0,r.kt)("h3",{id:"use-let-instead-of-var"},"Use ",(0,r.kt)("inlineCode",{parentName:"h3"},"let")," instead of ",(0,r.kt)("inlineCode",{parentName:"h3"},"var"),"."),(0,r.kt)("p",null,"If you must reassign references, use 'let' instead of 'var'. eslint: ",(0,r.kt)("a",{parentName:"p",href:"https://eslint.org/docs/rules/no-var.html"},(0,r.kt)("inlineCode",{parentName:"a"},"no-var"))),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"IMPORTANCE: ",(0,r.kt)("inlineCode",{parentName:"p"},"let")," is block-scoped rather than function-scoped like ",(0,r.kt)("inlineCode",{parentName:"p"},"var"),".")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"// bad \ud83d\udc4e\nvar count = 1;\nif (true) {\n  count += 1;\n}\n\n// good \ud83d\udc4d , use the let.\nlet count = 1;\nif (true) {\n  count += 1;\n}\n")),(0,r.kt)("h3",{id:"block-scoped"},"Block Scoped"),(0,r.kt)("p",null,"Note that both ",(0,r.kt)("inlineCode",{parentName:"p"},"let")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"const")," are block-scoped."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"// const and let only exist in the blocks they are defined in.\n{\n  let a = 1;\n  const b = 1;\n}\nconsole.log(a); // ReferenceError\nconsole.log(b); // ReferenceError\n")),(0,r.kt)("h2",{id:"objects"},"Objects"),(0,r.kt)("h3",{id:"no-new-object"},"No New Object"),(0,r.kt)("p",null,"Use the literal syntax for object creation."),(0,r.kt)("p",null,"eslint: ",(0,r.kt)("a",{parentName:"p",href:"https://eslint.org/docs/rules/no-new-object.html"},(0,r.kt)("inlineCode",{parentName:"a"},"no-new-object"))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"// bad \ud83d\udc4e\nconst item = new Object();\n\n// good \ud83d\udc4d\nconst item = {};\n")),(0,r.kt)("h3",{id:"computed-property-names"},"Computed Property Names"),(0,r.kt)("p",null,"Use computed property names when creating objects with dynamic property names."),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"IMPORTANCE: They allow you to define all the properties of an object in one place.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"function getKey(k) {\n  return `a key named ${k}`;\n}\n\n// bad \ud83d\udc4e\nconst obj = {\n  id: 5,\n  name: 'Lorem Ipsum',\n};\nobj[getKey('enabled')] = true;\n\n// good \ud83d\udc4d\nconst obj = {\n  id: 5,\n  name: 'Lorem Ipsum',\n  [getKey('enabled')]: true,\n};\n")),(0,r.kt)("h3",{id:"object-method-shorthand"},"Object Method Shorthand"),(0,r.kt)("p",null,"Use object method shorthand."),(0,r.kt)("p",null,"eslint: ",(0,r.kt)("a",{parentName:"p",href:"https://eslint.org/docs/rules/object-shorthand.html"},(0,r.kt)("inlineCode",{parentName:"a"},"object-shorthand"))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"// bad \ud83d\udc4e\nconst atom = {\n  value: 1,\n\n  addValue: function (value) {\n    return atom.value + value;\n  },\n};\n\n// good \ud83d\udc4d\nconst atom = {\n  value: 1,\n\n  addValue(value) {\n    return atom.value + value;\n  },\n};\n")),(0,r.kt)("h3",{id:"property-value-shorthand"},"Property Value Shorthand"),(0,r.kt)("p",null,"Use property value shorthand."),(0,r.kt)("p",null,"eslint: ",(0,r.kt)("a",{parentName:"p",href:"https://eslint.org/docs/rules/object-shorthand.html"},(0,r.kt)("inlineCode",{parentName:"a"},"object-shorthand"))),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"IMPORTANCE: It is shorter and descriptive.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"const lukeSkywalker = 'Lorem Ipsum';\n\n// bad \ud83d\udc4e\nconst obj = {\n  lukeSkywalker: lukeSkywalker,\n};\n\n// good \ud83d\udc4d\nconst obj = {\n  lukeSkywalker,\n};\n")),(0,r.kt)("h3",{id:"shorthand-property-grouping"},"Shorthand Property Grouping"),(0,r.kt)("p",null,"Group your shorthand properties at the beginning of your object declaration."),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"IMPORTANCE: It's easier to tell which properties are using the shorthand.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"const newyorkSubway = 'Newyork Subway';\nconst newjerseyTransit = 'NewJersy Transit';\n\n// bad \ud83d\udc4e\nconst obj = {\n  episodeOne: 1,\n  twoJediWalkIntoACantina: 2,\n  newjerseyTransit,\n  episodeThree: 3,\n  mayTheFourth: 4,\n  newyorkSubway,\n};\n\n// good \ud83d\udc4d\nconst obj = {\n  newjerseyTransit,\n  newyorkSubway,\n  episodeOne: 1,\n  twoJediWalkIntoACantina: 2,\n  episodeThree: 3,\n  mayTheFourth: 4,\n};\n")),(0,r.kt)("h3",{id:"quote-props"},"Quote Props"),(0,r.kt)("p",null,"Only quote properties that are invalid identifiers."),(0,r.kt)("p",null,"eslint: ",(0,r.kt)("a",{parentName:"p",href:"https://eslint.org/docs/rules/quote-props.html"},(0,r.kt)("inlineCode",{parentName:"a"},"quote-props"))),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"IMPORTANCE: In general we consider it subjectively easier to read. It improves syntax highlighting, and is also more easily optimized by many JS engines.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"// bad \ud83d\udc4e\nconst bad = {\n  'foo': 3,\n  'bar': 4,\n  'data-blah': 5,\n};\n\n// good \ud83d\udc4d\nconst good = {\n  foo: 3,\n  bar: 4,\n  'data-blah': 5,\n};\n")),(0,r.kt)("h3",{id:"objectprototype-methods"},(0,r.kt)("inlineCode",{parentName:"h3"},"Object.prototype")," Methods"),(0,r.kt)("p",null,"Do not call ",(0,r.kt)("inlineCode",{parentName:"p"},"Object.prototype")," methods directly,"),(0,r.kt)("p",null,"such as ",(0,r.kt)("inlineCode",{parentName:"p"},"hasOwnProperty"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"propertyIsEnumerable"),", and ",(0,r.kt)("inlineCode",{parentName:"p"},"isPrototypeOf"),". eslint: ",(0,r.kt)("a",{parentName:"p",href:"https://eslint.org/docs/rules/no-prototype-builtins"},(0,r.kt)("inlineCode",{parentName:"a"},"no-prototype-builtins"))),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"IMPORTANCE: These methods may be shadowed by properties on the object in question - consider ",(0,r.kt)("inlineCode",{parentName:"p"},"{ hasOwnProperty: false }")," - or, the object may be a null object (",(0,r.kt)("inlineCode",{parentName:"p"},"Object.create(null)"),").")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"// bad \ud83d\udc4e\nconsole.log(object.hasOwnProperty(key));\n\n// good \ud83d\udc4d\nconsole.log(Object.prototype.hasOwnProperty.call(object, key));\n\n// best\nconst has = Object.prototype.hasOwnProperty; // cache the lookup once, in module scope.\nconsole.log(has.call(object, key));\n/* or */\nimport has from 'has'; // https://www.npmjs.com/package/has\nconsole.log(has(object, key));\n")),(0,r.kt)("h3",{id:"object-spread-operator"},"Object Spread Operator"),(0,r.kt)("p",null,"Prefer the object spread operator."),(0,r.kt)("p",null,"over ",(0,r.kt)("a",{parentName:"p",href:"https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Object/assign"},(0,r.kt)("inlineCode",{parentName:"a"},"Object.assign"))," to shallow-copy objects. Use the object rest operator to get a new object with certain properties omitted."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"// very bad \ud83d\udc4e\ud83d\udc4e\nconst original = { a: 1, b: 2 };\nconst copy = Object.assign(original, { c: 3 }); // this mutates `original` \xe0\xb2 _\xe0\xb2\ndelete copy.a; // so does this\n\n// bad \ud83d\udc4e\nconst original = { a: 1, b: 2 };\nconst copy = Object.assign({}, original, { c: 3 }); // copy => { a: 1, b: 2, c: 3 }\n\n// good \ud83d\udc4d\nconst original = { a: 1, b: 2 };\nconst copy = { ...original, c: 3 }; // copy => { a: 1, b: 2, c: 3 }\n\nconst { a, ...noA } = copy; // noA => { b: 2, c: 3 }\n")),(0,r.kt)("h2",{id:"arrays"},"Arrays"),(0,r.kt)("h3",{id:"no-array-constructor"},"No Array Constructor"),(0,r.kt)("p",null,"Use the literal syntax for array creation."),(0,r.kt)("p",null,"eslint: ",(0,r.kt)("a",{parentName:"p",href:"https://eslint.org/docs/rules/no-array-constructor.html"},(0,r.kt)("inlineCode",{parentName:"a"},"no-array-constructor"))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"// bad \ud83d\udc4e\nconst items = new Array();\n\n// good \ud83d\udc4d\nconst items = [];\n")),(0,r.kt)("h3",{id:"use-arraypush"},"Use Arraypush"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Array/push"},"Array#push")," instead of direct assignment to add items to an array."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"const someStack = [];\n\n// bad \ud83d\udc4e\nsomeStack[someStack.length] = 'abracadabra';\n\n// good \ud83d\udc4d\nsomeStack.push('abracadabra');\n")),(0,r.kt)("h3",{id:"array-spreads"},"Array Spreads"),(0,r.kt)("p",null,"Use array spreads ",(0,r.kt)("inlineCode",{parentName:"p"},"...")," to copy arrays."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"// bad \ud83d\udc4e\nconst len = items.length;\nconst itemsCopy = [];\nlet i;\n\nfor (i = 0; i < len; i += 1) {\n  itemsCopy[i] = items[i];\n}\n\n// good \ud83d\udc4d\nconst itemsCopy = [...items];\n")),(0,r.kt)("h4",{id:"use-spreads-for-iterable-object"},"Use Spreads for Iterable Object"),(0,r.kt)("p",null,"To convert an iterable object to an array, use spreads ",(0,r.kt)("inlineCode",{parentName:"p"},"...")," instead of Array.from"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Array/from"},(0,r.kt)("inlineCode",{parentName:"a"},"Array.from")),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"const foo = document.querySelectorAll('.foo');\n\n// good \ud83d\udc4d\nconst nodes = Array.from(foo);\n\n// best\nconst nodes = [...foo];\n")),(0,r.kt)("h3",{id:"using-arrayfrom"},"Using Array.from"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Array/from"},(0,r.kt)("inlineCode",{parentName:"a"},"Array.from"))," for converting an array-like object to an array."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"const arrLike = { 0: 'foo', 1: 'bar', 2: 'baz', length: 3 };\n\n// bad \ud83d\udc4e\nconst arr = Array.prototype.slice.call(arrLike);\n\n// good \ud83d\udc4d\nconst arr = Array.from(arrLike);\n")),(0,r.kt)("h4",{id:"mapping-over-iterables"},"Mapping over Iterables"),(0,r.kt)("p",null,"Use ",(0,r.kt)("a",{parentName:"p",href:"https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Array/from"},(0,r.kt)("inlineCode",{parentName:"a"},"Array.from"))," instead of spread ",(0,r.kt)("inlineCode",{parentName:"p"},"...")," for mapping over iterables, because it avoids creating an intermediate array."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"// bad \ud83d\udc4e\nconst baz = [...foo].map(bar);\n\n// good \ud83d\udc4d\nconst baz = Array.from(foo, bar);\n")),(0,r.kt)("h3",{id:"array-callback-return"},"Array Callback Return"),(0,r.kt)("p",null,"Use return statements in array method callbacks."),(0,r.kt)("p",null,"It's ok to omit the return if the function body consists of a single statement returning an expression without side effects, following ",(0,r.kt)("a",{parentName:"p",href:"#arrows--implicit-return"},"8.2"),". eslint: ",(0,r.kt)("a",{parentName:"p",href:"https://eslint.org/docs/rules/array-callback-return"},(0,r.kt)("inlineCode",{parentName:"a"},"array-callback-return"))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"// good \ud83d\udc4d\n[1, 2, 3].map((x) => {\n  const y = x + 1;\n  return x * y;\n});\n\n// good \ud83d\udc4d\n[1, 2, 3].map((x) => x + 1);\n\n// bad \ud83d\udc4e - no returned value means `acc` becomes undefined after the first iteration\n[[0, 1], [2, 3], [4, 5],].reduce((acc, item, index) => {\n  const flatten = acc.concat(item);\n});\n\n// good \ud83d\udc4d\n[[0, 1], [2, 3], [4, 5],].reduce((acc, item, index) => {\n  const flatten = acc.concat(item);\n  return flatten;\n});\n\n// bad \ud83d\udc4e\ninbox.filter((msg) => {\n  const { subject, author } = msg;\n  if (subject === 'Mockingbird') {\n    return author === 'Harper Lee';\n  } else {\n    return false;\n  }\n});\n\n// good \ud83d\udc4d\ninbox.filter((msg) => {\n  const { subject, author } = msg;\n  if (subject === 'Mockingbird') {\n    return author === 'Harper Lee';\n  }\n\n  return false;\n});\n")),(0,r.kt)("h3",{id:"line-breaks-for-array-brackets"},"Line Breaks for Array Brackets"),(0,r.kt)("p",null,"Use line breaks after open and before close array brackets if an array has multiple lines"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"// bad \ud83d\udc4e\nconst arr = [\n  [0, 1], [2, 3], [4, 5],\n];\n\nconst objectInArray = [{\n  id: 1,\n}, {\n  id: 2,\n}];\n\nconst numberInArray = [\n  1, 2\n];\n\n// good \ud83d\udc4d\nconst arr = [[0, 1], [2, 3], [4, 5]];\n\nconst objectInArray = [\n  {\n    id: 1,\n  },\n  {\n    id: 2,\n  },\n];\n\nconst numberInArray = [\n  1,\n  2\n];\n")),(0,r.kt)("h2",{id:"destructuring"},"Destructuring"),(0,r.kt)("h3",{id:"use-object-destructuring"},"Use Object Destructuring"),(0,r.kt)("p",null,"Use object destructuring when accessing and using multiple properties of an object."),(0,r.kt)("p",null,"eslint: ",(0,r.kt)("a",{parentName:"p",href:"https://eslint.org/docs/rules/prefer-destructuring"},(0,r.kt)("inlineCode",{parentName:"a"},"prefer-destructuring"))),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"IMPORTANCE: Destructuring saves you from creating temporary references for those properties.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"// bad \ud83d\udc4e\nfunction getFullName(user) {\n  const firstName = user.firstName;\n  const lastName = user.lastName;\n\n  return `${firstName} ${lastName}`;\n}\n\n// good \ud83d\udc4d\nfunction getFullName(user) {\n  const { firstName, lastName } = user;\n  return `${firstName} ${lastName}`;\n}\n\n// best\nfunction getFullName({ firstName, lastName }) {\n  return `${firstName} ${lastName}`;\n}\n")),(0,r.kt)("h3",{id:"use-array-destructuring"},"Use Array Destructuring"),(0,r.kt)("p",null,"eslint: ",(0,r.kt)("a",{parentName:"p",href:"https://eslint.org/docs/rules/prefer-destructuring"},(0,r.kt)("inlineCode",{parentName:"a"},"prefer-destructuring"))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"const arr = [1, 2, 3, 4];\n\n// bad \ud83d\udc4e\nconst first = arr[0];\nconst second = arr[1];\n\n// good \ud83d\udc4d\nconst [first, second] = arr;\n")),(0,r.kt)("h3",{id:"multiple-return-values"},"Multiple Return Values"),(0,r.kt)("p",null,"Use object destructuring for multiple return values, not array destructuring."),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"IMPORTANCE: You can add new properties over time or change the order of things without breaking call sites.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"// bad \ud83d\udc4e\nfunction processInput(input) {\n  // then a miracle occurs\n  return [left, right, top, bottom];\n}\n\n// the caller needs to think about the order of return data\nconst [left, __, top] = processInput(input);\n\n// good \ud83d\udc4d\nfunction processInput(input) {\n  // then a miracle occurs\n  return { left, right, top, bottom };\n}\n\n// the caller selects only the data they need\nconst { left, top } = processInput(input);\n")),(0,r.kt)("h2",{id:"strings"},"Strings"),(0,r.kt)("h3",{id:"single-quotes"},"Single Quotes"),(0,r.kt)("p",null,"Use single quotes ",(0,r.kt)("inlineCode",{parentName:"p"},"''")," for strings."),(0,r.kt)("p",null,"eslint: ",(0,r.kt)("a",{parentName:"p",href:"https://eslint.org/docs/rules/quotes.html"},(0,r.kt)("inlineCode",{parentName:"a"},"quotes"))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"// bad \ud83d\udc4e\nconst name = 'Capt. Janeway';\n\n// bad \ud83d\udc4e - template literals should contain interpolation or newlines\nconst name = `Capt. Janeway`;\n\n// good \ud83d\udc4d\nconst name = 'Capt. Janeway';\n")),(0,r.kt)("h3",{id:"broken-strings"},"Broken Strings"),(0,r.kt)("p",null,"Strings that cause the line to go over 100 characters should not be written across multiple lines using string concatenation."),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"IMPORTANCE: Broken strings are painful to work with and make code less searchable.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"// bad \ud83d\udc4e\nconst errorMessage = 'This is a super long error that was thrown because \\\nof Batman. When you stop to think about how Batman had anything to do \\\nwith this, you would get nowhere \\\nfast.';\n\n// bad \ud83d\udc4e\nconst errorMessage = 'This is a super long error that was thrown because ' +\n  'of Batman. When you stop to think about how Batman had anything to do ' +\n  'with this, you would get nowhere fast.';\n\n// good \ud83d\udc4d\nconst errorMessage =\n  'This is a super long error that was thrown because of Batman. When you stop to think about how Batman had anything to do with this, you would get nowhere fast.';\n")),(0,r.kt)("h3",{id:"prefer-template-strings"},"Prefer Template Strings"),(0,r.kt)("p",null,"When programmatically building up strings, use template strings instead of concatenation."),(0,r.kt)("p",null,"eslint: ",(0,r.kt)("a",{parentName:"p",href:"https://eslint.org/docs/rules/prefer-template.html"},(0,r.kt)("inlineCode",{parentName:"a"},"prefer-template"))," ",(0,r.kt)("a",{parentName:"p",href:"https://eslint.org/docs/rules/template-curly-spacing"},(0,r.kt)("inlineCode",{parentName:"a"},"template-curly-spacing"))),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"IMPORTANCE: Template strings give you a readable, concise syntax with proper newlines and string interpolation features.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"// bad \ud83d\udc4e\nfunction sayHi(name) {\n  return 'How are you, ' + name + '?';\n}\n\n// bad \ud83d\udc4e\nfunction sayHi(name) {\n  return ['How are you, ', name, '?'].join();\n}\n\n// bad \ud83d\udc4e\nfunction sayHi(name) {\n  return `How are you, ${name}?`;\n}\n\n// good \ud83d\udc4d\nfunction sayHi(name) {\n  return `How are you, ${name}?`;\n}\n")),(0,r.kt)("h3",{id:"no-eval"},"No Eval"),(0,r.kt)("p",null,"Never use ",(0,r.kt)("inlineCode",{parentName:"p"},"eval()")," on a string, it opens too many vulnerabilities."),(0,r.kt)("p",null,"eslint: ",(0,r.kt)("a",{parentName:"p",href:"https://eslint.org/docs/rules/no-eval"},(0,r.kt)("inlineCode",{parentName:"a"},"no-eval"))),(0,r.kt)("h3",{id:"no-useless-escapes"},"No Useless Escapes"),(0,r.kt)("p",null,"Do not unnecessarily escape characters in strings."),(0,r.kt)("p",null,"eslint: ",(0,r.kt)("a",{parentName:"p",href:"https://eslint.org/docs/rules/no-useless-escape"},(0,r.kt)("inlineCode",{parentName:"a"},"no-useless-escape"))),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"IMPORTANCE: Backslashes harm readability, thus they should only be present when necessary.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"// bad \ud83d\udc4e\nconst foo = ''this' is \\'quoted\\'';\n\n// good \ud83d\udc4d\nconst foo = ''this' is \\'quoted\\'';\nconst foo = `my name is '${name}'`;\n")),(0,r.kt)("h2",{id:"functions"},"Functions"),(0,r.kt)("h3",{id:"function-style"},"Function Style"),(0,r.kt)("p",null,"Use named function expressions instead of function declarations."),(0,r.kt)("p",null,"eslint: ",(0,r.kt)("a",{parentName:"p",href:"https://eslint.org/docs/rules/func-style"},(0,r.kt)("inlineCode",{parentName:"a"},"func-style"))),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"IMPORTANCE: Function declarations are hoisted, which means that it's easy - too easy - to reference the function before it is defined in the file. This harms readability and maintainability.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"// bad \ud83d\udc4e\nfunction foo() {\n  // ...\n}\n\n// bad \ud83d\udc4e\nconst foo = function () {\n  // ...\n};\n\n// good \ud83d\udc4d\n// lexical name distinguished from the variable-referenced invocation(s)\nconst short = function longUniqueMoreDescriptiveLexicalFoo() {\n  // ...\n};\n")),(0,r.kt)("h3",{id:"wrap-immediately-invoked-functions"},"Wrap Immediately Invoked Functions"),(0,r.kt)("p",null,"Wrap immediately invoked function expressions in parentheses."),(0,r.kt)("p",null,"eslint: ",(0,r.kt)("a",{parentName:"p",href:"https://eslint.org/docs/rules/wrap-iife.html"},(0,r.kt)("inlineCode",{parentName:"a"},"wrap-iife"))),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"IMPORTANCE: An immediately invoked function expression is a single unit - wrapping both it, and its invocation parens, in parens, cleanly expresses this. Note that in a world with modules everywhere, you almost never need an IIFE.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"// immediately-invoked function expression (IIFE)\n(function () {\n  console.log('Welcome to the Internet. Please follow me.');\n})();\n")),(0,r.kt)("h3",{id:"no-loop-functions"},"No Loop Functions"),(0,r.kt)("p",null,"Never declare a function in a non-function block"),(0,r.kt)("p",null,"(",(0,r.kt)("inlineCode",{parentName:"p"},"if"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"while"),", etc). Assign the function to a variable instead."),(0,r.kt)("p",null,"eslint: ",(0,r.kt)("a",{parentName:"p",href:"https://eslint.org/docs/rules/no-loop-func.html"},(0,r.kt)("inlineCode",{parentName:"a"},"no-loop-func"))),(0,r.kt)("h3",{id:"a-function-declaration-is-not-a-statement"},"A function declaration is not a statement."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"// bad \ud83d\udc4e\nif (currentUser) {\n  function test() {\n    console.log('Nope.');\n  }\n}\n\n// good \ud83d\udc4d\nlet test;\nif (currentUser) {\n  test = () => {\n    console.log('Yup.');\n  };\n}\n")),(0,r.kt)("h3",{id:"parameters-and-arguments"},"Parameters and Arguments"),(0,r.kt)("h4",{id:"arguments"},(0,r.kt)("inlineCode",{parentName:"h4"},"arguments")),(0,r.kt)("p",null,"Never name a parameter ",(0,r.kt)("inlineCode",{parentName:"p"},"arguments"),". This will take precedence over the ",(0,r.kt)("inlineCode",{parentName:"p"},"arguments")," object that is given to every function scope."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"// bad \ud83d\udc4e\nfunction foo(name, options, arguments) {\n  // ...\n}\n\n// good \ud83d\udc4d\nfunction foo(name, options, args) {\n  // ...\n}\n")),(0,r.kt)("h4",{id:"prefer-rest-params"},"Prefer Rest Params"),(0,r.kt)("p",null,"Never use ",(0,r.kt)("inlineCode",{parentName:"p"},"arguments"),", opt to use rest syntax ",(0,r.kt)("inlineCode",{parentName:"p"},"...")," instead."),(0,r.kt)("p",null,"eslint: ",(0,r.kt)("a",{parentName:"p",href:"https://eslint.org/docs/rules/prefer-rest-params"},(0,r.kt)("inlineCode",{parentName:"a"},"prefer-rest-params"))),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"IMPORTANCE: ",(0,r.kt)("inlineCode",{parentName:"p"},"...")," is explicit about which arguments you want pulled.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"// bad \ud83d\udc4e\nfunction concatenateAll() {\n  const args = Array.prototype.slice.call(arguments);\n  return args.join('');\n}\n\n// good \ud83d\udc4d\nfunction concatenateAll(...args) {\n  return args.join('');\n}\n")),(0,r.kt)("h4",{id:"default-parameter-syntax"},"Default Parameter Syntax"),(0,r.kt)("p",null,"Use default parameter syntax rather than mutating function arguments."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"// really bad\nfunction handleThings(opts) {\n  // No! We shouldn't mutate function arguments.\n  // Double bad: if opts is falsy it'll be set to an object which may\n  // be what you want but it can introduce subtle bugs.\n  opts = opts || {};\n  // ...\n}\n\n// still bad\nfunction handleThings(opts) {\n  if (opts === void 0) {\n    opts = {};\n  }\n  // ...\n}\n\n// good \ud83d\udc4d\nfunction handleThings(opts = {}) {\n  // ...\n}\n")),(0,r.kt)("h4",{id:"parameter-side-effects"},"Parameter Side Effects"),(0,r.kt)("p",null,"Avoid side effects with default parameters."),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"IMPORTANCE: They are confusing to reason about.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"var b = 1;\n// bad \ud83d\udc4e\nfunction count(a = b++) {\n  console.log(a);\n}\ncount(); // 1\ncount(); // 2\ncount(3); // 3\ncount(); // 3\n")),(0,r.kt)("h4",{id:"default-parameters-last"},"Default Parameters Last"),(0,r.kt)("p",null,"Always put default parameters last."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"// bad \ud83d\udc4e\nfunction handleThings(opts = {}, name) {\n  // ...\n}\n\n// good \ud83d\udc4d\nfunction handleThings(name, opts = {}) {\n  // ...\n}\n")),(0,r.kt)("h4",{id:"never-mutate-parameters"},"Never Mutate Parameters."),(0,r.kt)("p",null,"eslint: ",(0,r.kt)("a",{parentName:"p",href:"https://eslint.org/docs/rules/no-param-reassign.html"},(0,r.kt)("inlineCode",{parentName:"a"},"no-param-reassign"))),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"IMPORTANCE: Manipulating objects passed in as parameters can cause unwanted variable side effects in the original caller.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"// bad \ud83d\udc4e\nfunction f1(obj) {\n  obj.key = 1;\n}\n\n// good \ud83d\udc4d\nfunction f2(obj) {\n  const key = Object.prototype.hasOwnProperty.call(obj, 'key') ? obj.key : 1;\n}\n")),(0,r.kt)("h4",{id:"never-reassign-parameters"},"Never Reassign Parameters."),(0,r.kt)("p",null,"eslint: ",(0,r.kt)("a",{parentName:"p",href:"https://eslint.org/docs/rules/no-param-reassign.html"},(0,r.kt)("inlineCode",{parentName:"a"},"no-param-reassign"))),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"IMPORTANCE: Reassigning parameters can lead to unexpected behavior, especially when accessing the ",(0,r.kt)("inlineCode",{parentName:"p"},"arguments")," object. It can also cause optimization issues, especially in V8.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"// bad \ud83d\udc4e\nfunction f1(a) {\n  a = 1;\n  // ...\n}\n\nfunction f2(a) {\n  if (!a) { a = 1; }\n  // ...\n}\n\n// good \ud83d\udc4d\nfunction f3(a) {\n  const b = a || 1;\n  // ...\n}\n\nfunction f4(a = 1) {\n  // ...\n}\n")),(0,r.kt)("h3",{id:"no-new-function"},"No New Function"),(0,r.kt)("p",null,"Never use the Function constructor to create a new function."),(0,r.kt)("p",null,"eslint: ",(0,r.kt)("a",{parentName:"p",href:"https://eslint.org/docs/rules/no-new-func"},(0,r.kt)("inlineCode",{parentName:"a"},"no-new-func"))),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"IMPORTANCE: Creating a function in this way evaluates a string similarly to ",(0,r.kt)("inlineCode",{parentName:"p"},"eval()"),", which opens vulnerabilities.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"// bad \ud83d\udc4e\nvar add = new Function('a', 'b', 'return a + b');\n\n// still bad\nvar subtract = Function('a', 'b', 'return a - b');\n")),(0,r.kt)("h3",{id:"function-spacing-1"},"Function Spacing"),(0,r.kt)("p",null,"Spacing in a function signature."),(0,r.kt)("p",null,"eslint: ",(0,r.kt)("a",{parentName:"p",href:"https://eslint.org/docs/rules/space-before-function-paren"},(0,r.kt)("inlineCode",{parentName:"a"},"space-before-function-paren"))," ",(0,r.kt)("a",{parentName:"p",href:"https://eslint.org/docs/rules/space-before-blocks"},(0,r.kt)("inlineCode",{parentName:"a"},"space-before-blocks"))),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"IMPORTANCE: Consistency is good, and you shouldn't have to add or remove a space when adding or removing a name.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"// bad \ud83d\udc4e\nconst f = function () {};\nconst g = function () {};\nconst h = function () {};\n\n// good \ud83d\udc4d\nconst x = function () {};\nconst y = function a() {};\n")),(0,r.kt)("h3",{id:"prefer-spread"},"Prefer Spread"),(0,r.kt)("p",null,"Prefer the use of the spread operator ",(0,r.kt)("inlineCode",{parentName:"p"},"...")," to call variadic functions."),(0,r.kt)("p",null,"eslint: ",(0,r.kt)("a",{parentName:"p",href:"https://eslint.org/docs/rules/prefer-spread"},(0,r.kt)("inlineCode",{parentName:"a"},"prefer-spread"))),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"IMPORTANCE: It's cleaner, you don't need to supply a context, and you can not easily compose ",(0,r.kt)("inlineCode",{parentName:"p"},"new")," with ",(0,r.kt)("inlineCode",{parentName:"p"},"apply"),".")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"// bad \ud83d\udc4e\nconst x = [1, 2, 3, 4, 5];\nconsole.log.apply(console, x);\n\n// good \ud83d\udc4d\nconst x = [1, 2, 3, 4, 5];\nconsole.log(...x);\n\n// bad \ud83d\udc4e\nnew (Function.prototype.bind.apply(Date, [null, 2016, 8, 5]))();\n\n// good \ud83d\udc4d\nnew Date(...[2016, 8, 5]);\n")),(0,r.kt)("h3",{id:"function-parentheses-newline"},"Function Parentheses Newline"),(0,r.kt)("p",null,"Functions with multiline signatures, or invocations, should be indented just like every other multiline."),(0,r.kt)("p",null,"eslint: ",(0,r.kt)("a",{parentName:"p",href:"https://eslint.org/docs/rules/function-paren-newline"},(0,r.kt)("inlineCode",{parentName:"a"},"function-paren-newline"))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"// bad \ud83d\udc4e\nfunction foo(bar,\n             baz,\n             quux) {\n  // ...\n}\n\n// good \ud83d\udc4d\nfunction foo(\n  bar,\n  baz,\n  quux,\n) {\n  // ...\n}\n\n// bad \ud83d\udc4e\nconsole.log(foo,\n  bar,\n  baz);\n\n// good \ud83d\udc4d\nconsole.log(\n  foo,\n  bar,\n  baz,\n);\n")),(0,r.kt)("h2",{id:"arrow-functions"},"Arrow Functions"),(0,r.kt)("h3",{id:"prefer-arrow-callback"},"Prefer Arrow Callback"),(0,r.kt)("p",null,"When you must use an anonymous function (as when passing an inline callback), use arrow function notation."),(0,r.kt)("p",null,"eslint: ",(0,r.kt)("a",{parentName:"p",href:"https://eslint.org/docs/rules/prefer-arrow-callback.html"},(0,r.kt)("inlineCode",{parentName:"a"},"prefer-arrow-callback")),", ",(0,r.kt)("a",{parentName:"p",href:"https://eslint.org/docs/rules/arrow-spacing.html"},(0,r.kt)("inlineCode",{parentName:"a"},"arrow-spacing"))),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"IMPORTANCE: It creates a version of the function that executes in the context of ",(0,r.kt)("inlineCode",{parentName:"p"},"this"),", which is usually what you want, and is a more concise syntax.")),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"Why not? If you have a fairly complicated function, you might move that logic out into its own named function expression.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"// bad \ud83d\udc4e\n[1, 2, 3].map(function (x) {\n  const y = x + 1;\n  return x * y;\n});\n\n// good \ud83d\udc4d\n[1, 2, 3].map((x) => {\n  const y = x + 1;\n  return x * y;\n});\n")),(0,r.kt)("h3",{id:"arrow-styling"},"Arrow Styling"),(0,r.kt)("p",null,"If the function body consists of a single statement, omit the braces and use the implicit return. Otherwise, keep the braces and use a ",(0,r.kt)("inlineCode",{parentName:"p"},"return")," statement."),(0,r.kt)("p",null,"eslint: ",(0,r.kt)("a",{parentName:"p",href:"https://eslint.org/docs/rules/arrow-parens.html"},(0,r.kt)("inlineCode",{parentName:"a"},"arrow-parens")),", ",(0,r.kt)("a",{parentName:"p",href:"https://eslint.org/docs/rules/arrow-body-style.html"},(0,r.kt)("inlineCode",{parentName:"a"},"arrow-body-style"))),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"IMPORTANCE: It reads well when multiple functions are chained together.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"// bad \ud83d\udc4e\n[1, 2, 3].map((number) => {\n  const nextNumber = number + 1;\n  `A string containing the ${nextNumber}.`;\n});\n\n// good \ud83d\udc4d\n[1, 2, 3].map((number) => `A string containing the ${number + 1}.`);\n\n// good \ud83d\udc4d\n[1, 2, 3].map((number) => {\n  const nextNumber = number + 1;\n  return `A string containing the ${nextNumber}.`;\n});\n\n// good \ud83d\udc4d\n[1, 2, 3].map((number, index) => ({\n  [index]: number,\n}));\n\n// No implicit return with side effects\nfunction foo(callback) {\n  const val = callback();\n  if (val === true) {\n    // Do something if callback returns true\n  }\n}\n\nlet bool = false;\n\n// bad \ud83d\udc4e\nfoo(() => (bool = true));\n\n// good \ud83d\udc4d\nfoo(() => {\n  bool = true;\n});\n")),(0,r.kt)("h3",{id:"arrow-readability"},"Arrow Readability"),(0,r.kt)("p",null,"In case the expression spans over multiple lines, wrap it in parentheses for better readability."),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"IMPORTANCE: It shows clearly where the function starts and ends.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"// bad \ud83d\udc4e\n['get', 'post', 'put'].map((httpMethod) => Object.prototype.hasOwnProperty.call(\n    httpMagicObjectWithAVeryLongName,\n    httpMethod\n  )\n);\n\n// good \ud83d\udc4d\n['get', 'post', 'put'].map((httpMethod) =>\n  Object.prototype.hasOwnProperty.call(\n    httpMagicObjectWithAVeryLongName,\n    httpMethod\n  )\n);\n")),(0,r.kt)("h3",{id:"arrow-parentheses"},"Arrow Parentheses"),(0,r.kt)("p",null,"Always include parentheses around arguments for clarity and consistency."),(0,r.kt)("p",null,"eslint: ",(0,r.kt)("a",{parentName:"p",href:"https://eslint.org/docs/rules/arrow-parens.html"},(0,r.kt)("inlineCode",{parentName:"a"},"arrow-parens"))),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"IMPORTANCE: Minimizes diff churn when adding or removing arguments.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"// bad \ud83d\udc4e\n[1, 2, 3].map(x => x * x);\n\n// good \ud83d\udc4d\n[1, 2, 3].map((x) => x * x);\n\n// bad \ud83d\udc4e\n[1, 2, 3].map(number => (\n    `A long string with the ${number}. It's so long that we don't want it to take up space on the .map line!`\n));\n\n// good \ud83d\udc4d\n[1, 2, 3].map((number) => (\n    `A long string with the ${number}. It's so long that we don't want it to take up space on the .map line!`\n));\n\n// bad \ud83d\udc4e\n[1, 2, 3].map(x => {\n  const y = x + 1;\n  return x * y;\n});\n\n// good \ud83d\udc4d\n[1, 2, 3].map((x) => {\n  const y = x + 1;\n  return x * y;\n});\n")),(0,r.kt)("h3",{id:"no-confusing-arrow"},"No Confusing Arrow"),(0,r.kt)("p",null,"Avoid confusing arrow function syntax (",(0,r.kt)("inlineCode",{parentName:"p"},"=>"),") with comparison operators (",(0,r.kt)("inlineCode",{parentName:"p"},"<="),", ",(0,r.kt)("inlineCode",{parentName:"p"},">="),")."),(0,r.kt)("p",null,"eslint: ",(0,r.kt)("a",{parentName:"p",href:"https://eslint.org/docs/rules/no-confusing-arrow"},(0,r.kt)("inlineCode",{parentName:"a"},"no-confusing-arrow"))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"// bad \ud83d\udc4e\nconst itemHeight = (item) => item.height <= 256 ? item.largeSize : item.smallSize;\n\n// bad \ud83d\udc4e\nconst itemHeight = (item) => item.height >= 256 ? item.largeSize : item.smallSize;\n\n// good \ud83d\udc4d\nconst itemHeight = (item) => (item.height <= 256 ? item.largeSize : item.smallSize);\n\n// good \ud83d\udc4d\nconst itemHeight = (item) => {\n  const { height, largeSize, smallSize } = item;\n  return height <= 256 ? largeSize : smallSize;\n};\n")),(0,r.kt)("h3",{id:"implicit-arrow-linebreak"},"Implicit Arrow Linebreak"),(0,r.kt)("p",null,"Enforce the location of arrow function bodies with implicit returns."),(0,r.kt)("p",null,"eslint: ",(0,r.kt)("a",{parentName:"p",href:"https://eslint.org/docs/rules/implicit-arrow-linebreak"},(0,r.kt)("inlineCode",{parentName:"a"},"implicit-arrow-linebreak"))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"// bad \ud83d\udc4e\n(foo) =>\n  bar;\n\n(foo) =>\n  (bar);\n\n// good \ud83d\udc4d\n(foo) => bar;\n(foo) => (bar);\n(foo) => (\n  bar\n)\n")),(0,r.kt)("h2",{id:"classes--constructors"},"Classes & Constructors"),(0,r.kt)("h3",{id:"class"},"Class"),(0,r.kt)("p",null,"Always use ",(0,r.kt)("inlineCode",{parentName:"p"},"class"),"."),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"IMPORTANCE: ",(0,r.kt)("inlineCode",{parentName:"p"},"class")," syntax is more concise and easier to reason about.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"// bad \ud83d\udc4e\nfunction Queue(contents = []) {\n  this.queue = [...contents];\n}\nQueue.prototype.pop = function () {\n  const value = this.queue[0];\n  this.queue.splice(0, 1);\n  return value;\n};\n\n// good \ud83d\udc4d\nclass Queue {\n  constructor(contents = []) {\n    this.queue = [...contents];\n  }\n  pop() {\n    const value = this.queue[0];\n    this.queue.splice(0, 1);\n    return value;\n  }\n}\n")),(0,r.kt)("h3",{id:"extends"},"Extends"),(0,r.kt)("p",null,"Use ",(0,r.kt)("inlineCode",{parentName:"p"},"extends")," for inheritance."),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"IMPORTANCE: It is a built-in way to inherit prototype functionality without breaking ",(0,r.kt)("inlineCode",{parentName:"p"},"instanceof"),".")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"// bad \ud83d\udc4e\nconst inherits = require('inherits');\nfunction PeekableQueue(contents) {\n  Queue.apply(this, contents);\n}\ninherits(PeekableQueue, Queue);\nPeekableQueue.prototype.peek = function () {\n  return this.queue[0];\n};\n\n// good \ud83d\udc4d\nclass PeekableQueue extends Queue {\n  peek() {\n    return this.queue[0];\n  }\n}\n")),(0,r.kt)("h3",{id:"method-chaining"},"Method Chaining"),(0,r.kt)("p",null,"Methods can return ",(0,r.kt)("inlineCode",{parentName:"p"},"this")," to help with method chaining."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"// bad \ud83d\udc4e\nJedi.prototype.jump = function () {\n  this.jumping = true;\n  return true;\n};\n\nJedi.prototype.setHeight = function (height) {\n  this.height = height;\n};\n\nconst luke = new Jedi();\nluke.jump(); // => true\nluke.setHeight(20); // => undefined\n\n// good \ud83d\udc4d\nclass Jedi {\n  jump() {\n    this.jumping = true;\n    return this;\n  }\n\n  setHeight(height) {\n    this.height = height;\n    return this;\n  }\n}\n\nconst luke = new Jedi();\n\nluke.jump()\n  .setHeight(20);\n")),(0,r.kt)("h3",{id:"tostring"},"toString()"),(0,r.kt)("p",null,"It\u2019s okay to write a custom ",(0,r.kt)("inlineCode",{parentName:"p"},"toString()")," method, just make sure it works successfully and causes no side effects."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"class Jedi {\n  constructor(options = {}) {\n    this.name = options.name || 'no name';\n  }\n\n  getName() {\n    return this.name;\n  }\n\n  toString() {\n    return `Jedi - ${this.getName()}`;\n  }\n}\n")),(0,r.kt)("h3",{id:"no-useless-constructor"},"No Useless Constructor"),(0,r.kt)("p",null,"Classes have a default constructor if one is not specified."),(0,r.kt)("p",null,"An empty constructor function or one that just delegates to a parent class is unnecessary. eslint: ",(0,r.kt)("a",{parentName:"p",href:"https://eslint.org/docs/rules/no-useless-constructor"},(0,r.kt)("inlineCode",{parentName:"a"},"no-useless-constructor"))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"// bad \ud83d\udc4e\nclass Jedi {\n  constructor() {}\n\n  getName() {\n    return this.name;\n  }\n}\n\n// bad \ud83d\udc4e\nclass Rey extends Jedi {\n  constructor(...args) {\n    super(...args);\n  }\n}\n\n// good \ud83d\udc4d\nclass Rey extends Jedi {\n  constructor(...args) {\n    super(...args);\n    this.name = 'Rey';\n  }\n}\n")),(0,r.kt)("h3",{id:"no-duplicate-class-members"},"No Duplicate Class Members"),(0,r.kt)("p",null,"Avoid duplicate class members."),(0,r.kt)("p",null,"eslint: ",(0,r.kt)("a",{parentName:"p",href:"https://eslint.org/docs/rules/no-dupe-class-members"},(0,r.kt)("inlineCode",{parentName:"a"},"no-dupe-class-members"))),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"IMPORTANCE: Duplicate class member declarations will silently prefer the last one - having duplicates is almost certainly a bug.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"// bad \ud83d\udc4e\nclass Foo {\n  bar() { return 1; }\n  bar() { return 2; }\n}\n\n// good \ud83d\udc4d\nclass Foo {\n  bar() { return 1; }\n}\n\n// good \ud83d\udc4d\nclass Foo {\n  bar() { return 2; }\n}\n")),(0,r.kt)("h3",{id:"class-methods-use-this"},"Class Methods Use ",(0,r.kt)("inlineCode",{parentName:"h3"},"this")),(0,r.kt)("p",null,"Class methods should use ",(0,r.kt)("inlineCode",{parentName:"p"},"this")," or be made into a static method unless an external library or framework requires to use specific non-static methods."),(0,r.kt)("p",null,"Being an instance method should indicate that it behaves differently based on properties of the receiver. eslint: ",(0,r.kt)("a",{parentName:"p",href:"https://eslint.org/docs/rules/class-methods-use-this"},(0,r.kt)("inlineCode",{parentName:"a"},"class-methods-use-this"))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"// bad \ud83d\udc4e\nclass Foo {\n  bar() {\n    console.log('bar');\n  }\n}\n\n// good \ud83d\udc4d  - this is used\nclass Foo {\n  bar() {\n    console.log(this.bar);\n  }\n}\n\n// good \ud83d\udc4d  - constructor is exempt\nclass Foo {\n  constructor() {\n    // ...\n  }\n}\n\n// good \ud83d\udc4d  - static methods aren't expected to use this\nclass Foo {\n  static bar() {\n    console.log('bar');\n  }\n}\n")),(0,r.kt)("h2",{id:"modules"},"Modules"),(0,r.kt)("h3",{id:"importexport"},"Import/Export"),(0,r.kt)("p",null,"Always use modules (",(0,r.kt)("inlineCode",{parentName:"p"},"import"),"/",(0,r.kt)("inlineCode",{parentName:"p"},"export"),") over a non-standard module system. You can always transpile to your preferred module system."),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"Why? Modules are the future, let\u2019s start using the future now.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"// bad \ud83d\udc4e\nconst AirbnbStyleGuide = require('./AirbnbStyleGuide');\nmodule.exports = AirbnbStyleGuide.es6;\n\n// ok\nimport AirbnbStyleGuide from './AirbnbStyleGuide';\nexport default AirbnbStyleGuide.es6;\n\n// best\nimport { es6 } from './AirbnbStyleGuide';\nexport default es6;\n")),(0,r.kt)("h3",{id:"wildcards"},"Wildcards"),(0,r.kt)("p",null,"Do not use wildcard imports."),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"Why? This makes sure you have a single default export.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"// bad \ud83d\udc4e\nimport * as AirbnbStyleGuide from './AirbnbStyleGuide';\n\n// good \ud83d\udc4d\nimport AirbnbStyleGuide from './AirbnbStyleGuide';\n")),(0,r.kt)("h3",{id:"export-from-import"},"Export From Import"),(0,r.kt)("p",null,"And do not export directly from an import."),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"Why? Although the one-liner is concise, having one clear way to import and one clear way to export makes things consistent.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"// bad \ud83d\udc4e\n// filename es6.js\nexport { es6 as default } from './AirbnbStyleGuide';\n\n// good \ud83d\udc4d\n// filename es6.js\nimport { es6 } from './AirbnbStyleGuide';\nexport default es6;\n")),(0,r.kt)("h3",{id:"no-duplicate-imports"},"No Duplicate Imports"),(0,r.kt)("p",null,"Only import from a path in one place."),(0,r.kt)("p",null," eslint: ",(0,r.kt)("a",{parentName:"p",href:"https://eslint.org/docs/rules/no-duplicate-imports"},(0,r.kt)("inlineCode",{parentName:"a"},"no-duplicate-imports"))),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"Why? Having multiple lines that import from the same path can make code harder to maintain.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"// bad \ud83d\udc4e\nimport foo from 'foo';\n// \u2026 some other imports \u2026 //\nimport { named1, named2 } from 'foo';\n\n// good \ud83d\udc4d\nimport foo, { named1, named2 } from 'foo';\n\n// good \ud83d\udc4d\nimport foo, {\n    named1,\n    named2,\n} from 'foo';\n")),(0,r.kt)("h3",{id:"do-not-export-mutable-bindings"},"Do Not Export Mutable Bindings."),(0,r.kt)("p",null,"eslint: ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/benmosher/eslint-plugin-import/blob/master/docs/rules/no-mutable-exports.md"},(0,r.kt)("inlineCode",{parentName:"a"},"import/no-mutable-exports"))),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"Why? Mutation should be avoided in general, but in particular when exporting mutable bindings. While this technique may be needed for some special cases, in general, only constant references should be exported.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"// bad \ud83d\udc4e\nlet foo = 3;\nexport { foo };\n\n// good \ud83d\udc4d\nconst foo = 3;\nexport { foo };\n")),(0,r.kt)("h3",{id:"named-and-default-export"},"Named and Default Export"),(0,r.kt)("p",null,"There are two different types of export, named and default. You can have multiple named exports per module but only one default export."),(0,r.kt)("p",null,"In JS modules with a single export, prefer default export over named export."),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"Note: this is inverted in Typescript, where we ",(0,r.kt)("a",{parentName:"p",href:"https://wwnorton.github.io/style/docs/typescript#import--export"},"prefer named exports and avoid default export"),".")),(0,r.kt)("p",null,"eslint: ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/benmosher/eslint-plugin-import/blob/master/docs/rules/prefer-default-export.md"},(0,r.kt)("inlineCode",{parentName:"a"},"import/prefer-default-export"))),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"Why? To encourage more files that only ever export one thing, which is better for readability and maintainability. ")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"// okay \nexport default function foo() {}\n\n// good \ud83d\udc4d\nexport function foo() {}\n")),(0,r.kt)("p",null,"Put all ",(0,r.kt)("inlineCode",{parentName:"p"},"import"),"s above non-import statements.\neslint: ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/benmosher/eslint-plugin-import/blob/master/docs/rules/first.md"},(0,r.kt)("inlineCode",{parentName:"a"},"import/first"))),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"Why? Since ",(0,r.kt)("inlineCode",{parentName:"p"},"import"),"s are hoisted, keeping them all at the top prevents surprising behavior.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"// bad \ud83d\udc4e\nimport foo from 'foo';\nfoo.init();\n\nimport bar from 'bar';\n\n// good \ud83d\udc4d\nimport foo from 'foo';\nimport bar from 'bar';\n\nfoo.init();\n")),(0,r.kt)("h3",{id:"object-curly-newline"},"Object Curly Newline"),(0,r.kt)("p",null,"Multiline imports should be indented just like multiline array and object literals."),(0,r.kt)("p",null,"eslint: ",(0,r.kt)("a",{parentName:"p",href:"https://eslint.org/docs/rules/object-curly-newline"},(0,r.kt)("inlineCode",{parentName:"a"},"object-curly-newline"))),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"Why? The curly braces follow the same indentation rules as every other curly brace block in the style guide, as do the trailing commas.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"// bad \ud83d\udc4e\nimport {longNameA, longNameB, longNameC, longNameD, longNameE} from 'path';\n\n// good \ud83d\udc4d\nimport {\n    longNameA,\n    longNameB,\n    longNameC,\n    longNameD,\n    longNameE,\n} from 'path';\n")),(0,r.kt)("h3",{id:"no-webpack-loader-syntax"},"No webpack Loader Syntax"),(0,r.kt)("p",null,"Disallow Webpack loader syntax in module import statements."),(0,r.kt)("p",null,"eslint: ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/benmosher/eslint-plugin-import/blob/master/docs/rules/no-webpack-loader-syntax.md"},(0,r.kt)("inlineCode",{parentName:"a"},"import/no-webpack-loader-syntax"))),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"Why? Since using Webpack syntax in the imports couples the code to a module bundler. Prefer using the loader syntax in ",(0,r.kt)("inlineCode",{parentName:"p"},"webpack.config.js"),".")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"// bad \ud83d\udc4e\nimport fooSass from 'css!sass!foo.scss';\nimport barCss from 'style!css!bar.css';\n\n// good \ud83d\udc4d\nimport fooSass from 'foo.scss';\nimport barCss from 'bar.css';\n")),(0,r.kt)("h3",{id:"no-js-filename-extensions"},"No JS Filename Extensions"),(0,r.kt)("p",null,"Do not include JavaScript filename extensions"),(0,r.kt)("p",null,"eslint: ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/benmosher/eslint-plugin-import/blob/master/docs/rules/extensions.md"},(0,r.kt)("inlineCode",{parentName:"a"},"import/extensions"))),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"Why? Including extensions inhibits refactoring, and inappropriately hardcodes implementation details of the module you're importing in every consumer.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"// bad \ud83d\udc4e\nimport foo from './foo.js';\nimport bar from './bar.jsx';\nimport baz from './baz/index.jsx';\n\n// good \ud83d\udc4d\nimport foo from './foo';\nimport bar from './bar';\nimport baz from './baz';\n")),(0,r.kt)("h2",{id:"iterators-and-generators"},"Iterators and Generators"),(0,r.kt)("h3",{id:"iterators"},"Iterators"),(0,r.kt)("p",null,"Don't Use Iterators."),(0,r.kt)("p",null,"Prefer JavaScript's higher-order functions instead of loops like ",(0,r.kt)("inlineCode",{parentName:"p"},"for-in")," or ",(0,r.kt)("inlineCode",{parentName:"p"},"for-of"),". eslint: ",(0,r.kt)("a",{parentName:"p",href:"https://eslint.org/docs/rules/no-iterator.html"},(0,r.kt)("inlineCode",{parentName:"a"},"no-iterator"))," ",(0,r.kt)("a",{parentName:"p",href:"https://eslint.org/docs/rules/no-restricted-syntax"},(0,r.kt)("inlineCode",{parentName:"a"},"no-restricted-syntax"))),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"IMPORTANCE: This enforces our immutable rule. Dealing with pure functions that return values is easier to reason about than side effects.")),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"Use ",(0,r.kt)("inlineCode",{parentName:"p"},"map()")," / ",(0,r.kt)("inlineCode",{parentName:"p"},"every()")," / ",(0,r.kt)("inlineCode",{parentName:"p"},"filter()")," / ",(0,r.kt)("inlineCode",{parentName:"p"},"find()")," / ",(0,r.kt)("inlineCode",{parentName:"p"},"findIndex()")," / ",(0,r.kt)("inlineCode",{parentName:"p"},"reduce()")," / ",(0,r.kt)("inlineCode",{parentName:"p"},"some()")," / ... to iterate over arrays, and ",(0,r.kt)("inlineCode",{parentName:"p"},"Object.keys()")," / ",(0,r.kt)("inlineCode",{parentName:"p"},"Object.values()")," / ",(0,r.kt)("inlineCode",{parentName:"p"},"Object.entries()")," to produce arrays so you can iterate over objects.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"const numbers = [1, 2, 3, 4, 5];\n\n// bad \ud83d\udc4e\nlet sum = 0;\nfor (let num of numbers) {\n  sum += num;\n}\nsum === 15;\n\n// good \ud83d\udc4d\nlet sum = 0;\nnumbers.forEach((num) => {\n  sum += num;\n});\nsum === 15;\n\n// best (use the functional force)\nconst sum = numbers.reduce((total, num) => total + num, 0);\nsum === 15;\n\n// bad \ud83d\udc4e\nconst increasedByOne = [];\nfor (let i = 0; i < numbers.length; i++) {\n  increasedByOne.push(numbers[i] + 1);\n}\n\n// good \ud83d\udc4d\nconst increasedByOne = [];\nnumbers.forEach((num) => {\n  increasedByOne.push(num + 1);\n});\n\n// best (keeping it functional)\nconst increasedByOne = numbers.map((num) => num + 1);\n")),(0,r.kt)("h3",{id:"generators"},"Generators"),(0,r.kt)("p",null,"Don\u2019t Use Generators For Now"),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"Why? They don\u2019t transpile well to ES5.")),(0,r.kt)("h4",{id:"generator-spacing"},"Generator Spacing"),(0,r.kt)("p",null,"If you must use generators, or if you disregard ",(0,r.kt)("a",{parentName:"p",href:"#generators--nope"},"our advice"),", make sure their function signature is spaced properly."),(0,r.kt)("p",null,"eslint: ",(0,r.kt)("a",{parentName:"p",href:"https://eslint.org/docs/rules/generator-star-spacing"},(0,r.kt)("inlineCode",{parentName:"a"},"generator-star-spacing"))),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"Why? ",(0,r.kt)("inlineCode",{parentName:"p"},"function")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"*")," are part of the same conceptual keyword - ",(0,r.kt)("inlineCode",{parentName:"p"},"*")," is not a modifier for ",(0,r.kt)("inlineCode",{parentName:"p"},"function"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"function*")," is a unique construct, different from ",(0,r.kt)("inlineCode",{parentName:"p"},"function"),".")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"// bad \ud83d\udc4e\nfunction * foo() {\n    // ...\n}\n\n// bad \ud83d\udc4e\nconst bar = function * () {\n    // ...\n};\n\n// bad \ud83d\udc4e\nconst baz = function *() {\n    // ...\n};\n\n// bad \ud83d\udc4e\nconst quux = function*() {\n    // ...\n};\n\n// bad \ud83d\udc4e\nfunction*foo() {\n    // ...\n}\n\n// bad \ud83d\udc4e\nfunction *foo() {\n    // ...\n}\n\n// very bad\nfunction\n*\nfoo() {\n    // ...\n}\n\n// very bad\nconst wat = function\n*\n() {\n    // ...\n};\n\n// good \ud83d\udc4d\nfunction* foo() {\n    // ...\n}\n\n// good \ud83d\udc4d\nconst foo = function* () {\n    // ...\n};\n")),(0,r.kt)("h2",{id:"properties"},"Properties"),(0,r.kt)("h3",{id:"dot-notation"},"Dot Notation"),(0,r.kt)("p",null,"Use dot notation when accessing properties."),(0,r.kt)("p",null,"eslint: ",(0,r.kt)("a",{parentName:"p",href:"https://eslint.org/docs/rules/dot-notation.html"},(0,r.kt)("inlineCode",{parentName:"a"},"dot-notation"))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"const luke = {\n  jedi: true,\n  age: 28,\n};\n\n// bad \ud83d\udc4e\nconst isJedi = luke['jedi'];\n\n// good \ud83d\udc4d\nconst isJedi = luke.jedi;\n")),(0,r.kt)("h3",{id:"bracket-notation"},"Bracket Notation"),(0,r.kt)("p",null,"Use bracket notation ",(0,r.kt)("inlineCode",{parentName:"p"},"[]")," when accessing properties with a variable."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"const luke = {\n  jedi: true,\n  age: 28,\n};\n\nfunction getProp(prop) {\n  return luke[prop];\n}\n\nconst isJedi = getProp('jedi');\n")),(0,r.kt)("h3",{id:"no-restricted-properties"},"No Restricted Properties"),(0,r.kt)("p",null,"Use exponentiation operator ",(0,r.kt)("inlineCode",{parentName:"p"},"**")," when calculating exponentiations."),(0,r.kt)("p",null,"eslint: ",(0,r.kt)("a",{parentName:"p",href:"https://eslint.org/docs/rules/no-restricted-properties"},(0,r.kt)("inlineCode",{parentName:"a"},"no-restricted-properties")),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"// bad \ud83d\udc4e\nconst binary = Math.pow(2, 10);\n\n// good \ud83d\udc4d\nconst binary = 2 ** 10;\n")),(0,r.kt)("h2",{id:"variables"},"Variables"),(0,r.kt)("h3",{id:"use-const-and-let"},"Use ",(0,r.kt)("inlineCode",{parentName:"h3"},"const")," and ",(0,r.kt)("inlineCode",{parentName:"h3"},"let")),(0,r.kt)("p",null,"Always use ",(0,r.kt)("inlineCode",{parentName:"p"},"const")," or ",(0,r.kt)("inlineCode",{parentName:"p"},"let")," to declare variables."),(0,r.kt)("p",null,"'var' is a global variables. We want to avoid using the global namespace. eslint: ",(0,r.kt)("a",{parentName:"p",href:"https://eslint.org/docs/rules/no-undef"},(0,r.kt)("inlineCode",{parentName:"a"},"no-undef"))," ",(0,r.kt)("a",{parentName:"p",href:"https://eslint.org/docs/rules/prefer-const"},(0,r.kt)("inlineCode",{parentName:"a"},"prefer-const"))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"// bad \ud83d\udc4e\nsuperPower = new SuperPower();\n\n// good \ud83d\udc4d\nconst superPower = new SuperPower();\n")),(0,r.kt)("h3",{id:"one-variable"},"One Variable"),(0,r.kt)("p",null,"Use one ",(0,r.kt)("inlineCode",{parentName:"p"},"const")," or ",(0,r.kt)("inlineCode",{parentName:"p"},"let")," declaration per variable or assignment."),(0,r.kt)("p",null,"eslint: ",(0,r.kt)("a",{parentName:"p",href:"https://eslint.org/docs/rules/one-var.html"},(0,r.kt)("inlineCode",{parentName:"a"},"one-var"))),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"IMPORTANCE: It's easier to add new variable declarations this way, and you never have to worry about swapping out a ",(0,r.kt)("inlineCode",{parentName:"p"},";")," for a ",(0,r.kt)("inlineCode",{parentName:"p"},",")," or introducing punctuation-only diffs. You can also step through each declaration with the debugger, instead of jumping through all of them at once.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"// bad \ud83d\udc4e\nconst items = getItems(),\n  goSportsTeam = true,\n  dragonball = 'z';\n\n// bad \ud83d\udc4e\n// (compare to above, and try to spot the mistake)\nconst items = getItems(),\n  goSportsTeam = true;\n  dragonball = 'z';\n\n// good \ud83d\udc4d\nconst items = getItems();\nconst goSportsTeam = true;\nconst dragonball = 'z';\n")),(0,r.kt)("h3",{id:"grouping-variables"},"Grouping Variables"),(0,r.kt)("p",null,"Group all your ",(0,r.kt)("inlineCode",{parentName:"p"},"const")," and then group all your ",(0,r.kt)("inlineCode",{parentName:"p"},"let"),"."),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"This is helpful when later on you might need to assign a variable depending on one of the previous assigned variables.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"// bad \ud83d\udc4e\nlet i, len, dragonball,\n  items = getItems(),\n  goSportsTeam = true;\n\n// bad \ud83d\udc4e\nlet i;\nconst items = getItems();\nlet dragonball;\nconst goSportsTeam = true;\nlet len;\n\n// good \ud83d\udc4d\nconst goSportsTeam = true;\nconst items = getItems();\nlet dragonball;\nlet i;\nlet length;\n")),(0,r.kt)("h3",{id:"reasonably-placed-variables"},"Reasonably Placed Variables"),(0,r.kt)("p",null,"Assign variables where you need them, but place them in a reasonable place."),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},(0,r.kt)("inlineCode",{parentName:"p"},"let")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"const")," are block scoped and not function scoped.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"// bad \ud83d\udc4e - unnecessary function call\nfunction checkName(hasName) {\n  const name = getName();\n\n  if (hasName === 'test') {\n    return false;\n  }\n\n  if (name === 'test') {\n    this.setName('');\n    return false;\n  }\n\n  return name;\n}\n\n// good \ud83d\udc4d\nfunction checkName(hasName) {\n  if (hasName === 'test') {\n    return false;\n  }\n\n  const name = getName();\n\n  if (name === 'test') {\n    this.setName('');\n    return false;\n  }\n\n  return name;\n}\n")),(0,r.kt)("h3",{id:"no-multi-assign"},"No Multi Assign"),(0,r.kt)("p",null,"Don't chain variable assignments."),(0,r.kt)("p",null,"eslint: ",(0,r.kt)("a",{parentName:"p",href:"https://eslint.org/docs/rules/no-multi-assign"},(0,r.kt)("inlineCode",{parentName:"a"},"no-multi-assign"))),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"Why? Chaining variable assignments creates implicit global variables.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"// bad \ud83d\udc4e\n(function example() {\n  // JavaScript interprets this as\n  // let a = ( b = ( c = 1 ) );\n  // The let keyword only applies to variable a; variables b and c become\n  // global variables.\n  let a = (b = c = 1);\n}());\n\nconsole.log(a); // throws ReferenceError\nconsole.log(b); // 1\nconsole.log(c); // 1\n\n// good \ud83d\udc4d\n(function example() {\n  let a = 1;\n  let b = a;\n  let c = a;\n}());\n\nconsole.log(a); // throws ReferenceError\nconsole.log(b); // throws ReferenceError\nconsole.log(c); // throws ReferenceError\n\n// the same applies for `const`\n")),(0,r.kt)("h3",{id:"no-unary-increments"},"No Unary Increments"),(0,r.kt)("p",null,"Avoid using unary increments and decrements (",(0,r.kt)("inlineCode",{parentName:"p"},"++"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"--"),")."),(0,r.kt)("p",null,"eslint ",(0,r.kt)("a",{parentName:"p",href:"https://eslint.org/docs/rules/no-plusplus"},(0,r.kt)("inlineCode",{parentName:"a"},"no-plusplus"))),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"Why? Per the eslint documentation, unary increment and decrement statements are subject to automatic semicolon insertion and can cause silent errors with incrementing or decrementing values within an application. It is also more expressive to mutate your values with statements like ",(0,r.kt)("inlineCode",{parentName:"p"},"num += 1")," instead of ",(0,r.kt)("inlineCode",{parentName:"p"},"num++")," or ",(0,r.kt)("inlineCode",{parentName:"p"},"num ++"),". Disallowing unary increment and decrement statements also prevents you from pre-incrementing/pre-decrementing values unintentionally which can also cause unexpected behavior in your programs.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"// bad \ud83d\udc4e\nconst array = [1, 2, 3];\nlet num = 1;\nnum++;\n--num;\n\nlet sum = 0;\nlet truthyCount = 0;\nfor (let i = 0; i < array.length; i++) {\n  let value = array[i];\n  sum += value;\n  if (value) {\n    truthyCount++;\n  }\n}\n\n// good \ud83d\udc4d\nconst array = [1, 2, 3];\nlet num = 1;\nnum += 1;\nnum -= 1;\n\nconst sum = array.reduce((a, b) => a + b, 0);\nconst truthyCount = array.filter(Boolean).length;\n")),(0,r.kt)("h3",{id:"operator-linebreak"},"Operator Linebreak"),(0,r.kt)("p",null,"Avoid linebreaks before or after ",(0,r.kt)("inlineCode",{parentName:"p"},"=")," in an assignment."),(0,r.kt)("p",null,"If your assignment violates ",(0,r.kt)("a",{parentName:"p",href:"https://eslint.org/docs/rules/max-len.html"},(0,r.kt)("inlineCode",{parentName:"a"},"max-len")),", surround the value in parens. eslint ",(0,r.kt)("a",{parentName:"p",href:"https://eslint.org/docs/rules/operator-linebreak.html"},(0,r.kt)("inlineCode",{parentName:"a"},"operator-linebreak")),"."),(0,r.kt)("p",null,"Linebreaks surrounding ",(0,r.kt)("inlineCode",{parentName:"p"},"=")," can obfuscate the value of an assignment."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"// bad \ud83d\udc4e\nconst foo =\n  superLongLongLongLongLongLongLongLongFunctionName();\n\n// bad \ud83d\udc4e\nconst foo\n  = 'superLongLongLongLongLongLongLongLongString';\n\n// good \ud83d\udc4d\nconst foo = (\n  superLongLongLongLongLongLongLongLongFunctionName();\n);\n\n// good \ud83d\udc4d\nconst foo = 'superLongLongLongLongLongLongLongLongString';\n")),(0,r.kt)("h3",{id:"no-unused-variables"},"No Unused Variables"),(0,r.kt)("p",null,"Disallow unused variables."),(0,r.kt)("p",null,"eslint: ",(0,r.kt)("a",{parentName:"p",href:"https://eslint.org/docs/rules/no-unused-vars"},(0,r.kt)("inlineCode",{parentName:"a"},"no-unused-vars"))),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"Why? Variables that are declared and not used anywhere in the code are most likely an error due to incomplete refactoring. Such variables take up space in the code and can lead to confusion by readers.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"// bad \ud83d\udc4e\nvar some_unused_var = 42;\n\n// Write-only variables are not considered as used.\nvar y = 10;\ny = 5;\n\n// A read for a modification of itself is not considered as used.\nvar z = 0;\nz = z + 1;\n\n// Unused function arguments.\nfunction getX(x, y) {\n  return x;\n}\n\n// good \ud83d\udc4d\nfunction getXPlusY(x, y) {\n  return x + y;\n}\n\nvar x = 1;\nvar y = a + 2;\n\nalert(getXPlusY(x, y));\n\n// 'type' is ignored even if unused because it has a rest property sibling.\n// This is a form of extracting an object that omits the specified keys.\nvar { type, ...coords } = data;\n// 'coords' is now the 'data' object without its 'type' property.\n")),(0,r.kt)("h3",{id:"object--array-creation"},"Object / Array creation"),(0,r.kt)("p",null,"Use trailing commas and put short declarations on a single line."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"// bad \ud83d\udc4e\nvar a = [\n  'hello', 'world'\n];\nvar b = {'good': 'code'\n        , is generally: 'pretty'\n        };\n\n// good \ud83d\udc4d\nvar a = ['hello', 'world'];\nvar b = {\n  good: 'code',\n  'is generally': 'pretty',\n};\n")),(0,r.kt)("h2",{id:"hoisting"},"Hoisting"),(0,r.kt)("h3",{id:"var"},(0,r.kt)("inlineCode",{parentName:"h3"},"var")),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"var")," declarations get hoisted to the top of their closest enclosing function scope, their assignment does not."),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},(0,r.kt)("inlineCode",{parentName:"p"},"const")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"let")," declarations are blessed with a new concept called ",(0,r.kt)("a",{parentName:"p",href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/let#Temporal_dead_zone"},"Temporal Dead Zones (TDZ)"),". It\u2019s important to know why ",(0,r.kt)("a",{parentName:"p",href:"http://es-discourse.com/t/why-typeof-is-no-longer-safe/15"},"typeof is no longer safe"),".")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"// we know this wouldn\u2019t work (assuming there\n// is no notDefined global variable)\nfunction example() {\n  console.log(notDefined); // => throws a ReferenceError\n}\n\n// creating a variable declaration after you\n// reference the variable will work due to\n// variable hoisting. Note: the assignment\n// value of `true` is not hoisted.\nfunction example() {\n  console.log(declaredButNotAssigned); // => undefined\n  var declaredButNotAssigned = true;\n}\n\n// the interpreter is hoisting the variable\n// declaration to the top of the scope,\n// which means our example could be rewritten as:\nfunction example() {\n  let declaredButNotAssigned;\n  console.log(declaredButNotAssigned); // => undefined\n  declaredButNotAssigned = true;\n}\n\n// using const and let\nfunction example() {\n  console.log(declaredButNotAssigned); // => throws a ReferenceError\n  console.log(typeof declaredButNotAssigned); // => throws a ReferenceError\n  const declaredButNotAssigned = true;\n}\n")),(0,r.kt)("h3",{id:"anonymous-function-expressions"},"Anonymous Function Expressions"),(0,r.kt)("p",null,"Anonymous function expressions hoist their variable name, but not the function assignment."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"function example() {\n  console.log(anonymous); // => undefined\n\n  anonymous(); // => TypeError anonymous is not a function\n\n  var anonymous = function () {\n    console.log('anonymous function expression');\n  };\n}\n")),(0,r.kt)("h3",{id:"named-function-expressions"},"Named Function Expressions"),(0,r.kt)("p",null,"Named function expressions hoist the variable name, not the function name or the function body."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"function example() {\n  console.log(named); // => undefined\n\n  named(); // => TypeError named is not a function\n\n  superPower(); // => ReferenceError superPower is not defined\n\n  var named = function superPower() {\n    console.log('Flying');\n  };\n}\n\n// the same is true when the function name\n// is the same as the variable name.\nfunction example() {\n  console.log(named); // => undefined\n\n  named(); // => TypeError named is not a function\n\n  var named = function named() {\n    console.log('named');\n  };\n}\n")),(0,r.kt)("h3",{id:"function-declarations"},"Function Declarations"),(0,r.kt)("p",null,"Function declarations hoist their name and the function body."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"function example() {\n  superPower(); // => Flying\n\n  function superPower() {\n    console.log('Flying');\n  }\n}\n")),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"For more information refer to ",(0,r.kt)("a",{parentName:"p",href:"http://www.adequatelygood.com/2010/2/JavaScript-Scoping-and-Hoisting/"},"JavaScript Scoping & Hoisting")," by ",(0,r.kt)("a",{parentName:"p",href:"http://www.adequatelygood.com/"},"Ben Cherry"),".")),(0,r.kt)("h2",{id:"comparison-operators--equality"},"Comparison Operators & Equality"),(0,r.kt)("h3",{id:"equals"},"Equals"),(0,r.kt)("p",null,"Must use ",(0,r.kt)("inlineCode",{parentName:"p"},"===")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"!==")," over ",(0,r.kt)("inlineCode",{parentName:"p"},"==")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"!="),"."),(0,r.kt)("p",null,"eslint: ",(0,r.kt)("a",{parentName:"p",href:"https://eslint.org/docs/rules/eqeqeq.html"},(0,r.kt)("inlineCode",{parentName:"a"},"eqeqeq"))),(0,r.kt)("h3",{id:"if"},(0,r.kt)("inlineCode",{parentName:"h3"},"if")),(0,r.kt)("p",null,"Conditional statements such as the ",(0,r.kt)("inlineCode",{parentName:"p"},"if")," statement evaluate their expression using coercion with the ",(0,r.kt)("inlineCode",{parentName:"p"},"ToBoolean")," abstract method and always follow these simple rules:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Objects")," evaluate to ",(0,r.kt)("strong",{parentName:"li"},"true")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Undefined")," evaluates to ",(0,r.kt)("strong",{parentName:"li"},"false")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Null")," evaluates to ",(0,r.kt)("strong",{parentName:"li"},"false")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Booleans")," evaluate to ",(0,r.kt)("strong",{parentName:"li"},"the value of the boolean")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Numbers")," evaluate to ",(0,r.kt)("strong",{parentName:"li"},"false")," if ",(0,r.kt)("strong",{parentName:"li"},"+0, -0, or NaN"),", otherwise ",(0,r.kt)("strong",{parentName:"li"},"true")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Strings")," evaluate to ",(0,r.kt)("strong",{parentName:"li"},"false")," if an empty string ",(0,r.kt)("inlineCode",{parentName:"li"},"''"),", otherwise ",(0,r.kt)("strong",{parentName:"li"},"true"))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"if ([0] && []) {\n  // true\n  // an array (even an empty one) is an object, objects will evaluate to true\n}\n")),(0,r.kt)("h3",{id:"booleans-strings-and-numbers"},"Booleans, Strings and Numbers"),(0,r.kt)("p",null,"Use shortcuts for booleans, but explicit comparisons for strings and numbers."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"// bad \ud83d\udc4e\nif (isValid === true) {\n  // ...\n}\n\n// good \ud83d\udc4d\nif (isValid) {\n  // ...\n}\n\n// bad \ud83d\udc4e\nif (name) {\n  // ...\n}\n\n// good \ud83d\udc4d\nif (name !== '') {\n  // ...\n}\n\n// bad \ud83d\udc4e\nif (collection.length) {\n  // ...\n}\n\n// good \ud83d\udc4d\nif (collection.length > 0) {\n  // ...\n}\n")),(0,r.kt)("h3",{id:"more-info"},"More Info"),(0,r.kt)("p",null,"For more information see ",(0,r.kt)("a",{parentName:"p",href:"https://javascriptweblog.wordpress.com/2011/02/07/truth-equality-and-javascript/#more-2108"},"Truth Equality and JavaScript")," by Angus Croll."),(0,r.kt)("h3",{id:"no-case-declarations"},"No Case Declarations"),(0,r.kt)("p",null,"Use braces to create blocks in ",(0,r.kt)("inlineCode",{parentName:"p"},"case")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"default")," clauses that contain lexical declarations (e.g. ",(0,r.kt)("inlineCode",{parentName:"p"},"let"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"const"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"function"),", and ",(0,r.kt)("inlineCode",{parentName:"p"},"class"),").\neslint: ",(0,r.kt)("a",{parentName:"p",href:"https://eslint.org/docs/rules/no-case-declarations.html"},(0,r.kt)("inlineCode",{parentName:"a"},"no-case-declarations"))),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"Why? Lexical declarations are visible in the entire ",(0,r.kt)("inlineCode",{parentName:"p"},"switch")," block but only get initialized when assigned, which only happens when its ",(0,r.kt)("inlineCode",{parentName:"p"},"case")," is reached. This causes problems when multiple ",(0,r.kt)("inlineCode",{parentName:"p"},"case")," clauses attempt to define the same thing.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"// bad \ud83d\udc4e\nswitch (foo) {\n  case 1:\n    let x = 1;\n    break;\n  case 2:\n    const y = 2;\n    break;\n  case 3:\n    function f() {\n        // ...\n    }\n    break;\n  default:\n    class C {}\n}\n\n// good \ud83d\udc4d\nswitch (foo) {\n  case 1: {\n    let x = 1;\n    break;\n  }\n  case 2: {\n    const y = 2;\n    break;\n  }\n  case 3: {\n    function f() {\n        // ...\n    }\n    break;\n  }\n  case 4:\n    bar();\n    break;\n  default: {\n    class C {}\n  }\n}\n")),(0,r.kt)("h3",{id:"ternaries"},"Ternaries"),(0,r.kt)("p",null,"Ternaries should not be nested and generally be single line expressions."),(0,r.kt)("p",null,"eslint: ",(0,r.kt)("a",{parentName:"p",href:"https://eslint.org/docs/rules/no-nested-ternary.html"},(0,r.kt)("inlineCode",{parentName:"a"},"no-nested-ternary"))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"// bad \ud83d\udc4e\nconst foo = maybe1 > maybe2\n  ? 'bar'\n  : value1 > value2 ? 'baz' : null;\n\n// split into 2 separated ternary expressions\nconst maybeNull = value1 > value2 ? 'baz' : null;\n\n// better\nconst foo = maybe1 > maybe2\n  ? 'bar'\n  : maybeNull;\n\n// best\nconst foo = maybe1 > maybe2 ? 'bar' : maybeNull;\n")),(0,r.kt)("h4",{id:"unnecessary-ternaries"},"Unnecessary Ternaries"),(0,r.kt)("p",null,"Avoid unneeded ternary statements."),(0,r.kt)("p",null,"eslint: ",(0,r.kt)("a",{parentName:"p",href:"https://eslint.org/docs/rules/no-unneeded-ternary.html"},(0,r.kt)("inlineCode",{parentName:"a"},"no-unneeded-ternary"))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"// bad \ud83d\udc4e\nconst foo = a ? a : b;\nconst bar = c ? true : false;\nconst baz = c ? false : true;\n\n// good \ud83d\udc4d\nconst foo = a || b;\nconst bar = !!c;\nconst baz = !c;\n")),(0,r.kt)("h3",{id:"mixing-operators"},"Mixing Operators"),(0,r.kt)("p",null,"When mixing operators, enclose them in parentheses."),(0,r.kt)("p",null,"The only exception is the standard arithmetic operators: ",(0,r.kt)("inlineCode",{parentName:"p"},"+"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"-"),", and ",(0,r.kt)("inlineCode",{parentName:"p"},"**")," since their precedence is broadly understood. We recommend enclosing ",(0,r.kt)("inlineCode",{parentName:"p"},"/")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"*")," in parentheses because their precedence can be ambiguous when they are mixed.\neslint: ",(0,r.kt)("a",{parentName:"p",href:"https://eslint.org/docs/rules/no-mixed-operators.html"},(0,r.kt)("inlineCode",{parentName:"a"},"no-mixed-operators"))),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"IMPORTANCE: This improves readability and clarifies the developer's intention.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"// bad \ud83d\udc4e\nconst foo = a && b < 0 || c > 0 || d + 1 === 0;\n\n// bad \ud83d\udc4e\nconst bar = a ** b - 5 % d;\n\n// bad \ud83d\udc4e\n// one may be confused into thinking (a || b) && c\nif (a || b && c) {\n  return d;\n}\n\n// bad \ud83d\udc4e\nconst bar = a + b / c * d;\n\n// good \ud83d\udc4d\nconst foo = (a && b < 0) || c > 0 || (d + 1 === 0);\n\n// good \ud83d\udc4d\nconst bar = a ** b - (5 % d);\n\n// good \ud83d\udc4d\nif (a || (b && c)) {\n  return d;\n}\n\n// good \ud83d\udc4d\nconst bar = a + (b / c) * d;\n")),(0,r.kt)("h2",{id:"blocks"},"Blocks"),(0,r.kt)("h3",{id:"multiline-blocks"},"Multiline Blocks"),(0,r.kt)("p",null,"Use braces with all multiline blocks."),(0,r.kt)("p",null,"eslint: ",(0,r.kt)("a",{parentName:"p",href:"https://eslint.org/docs/rules/nonblock-statement-body-position"},(0,r.kt)("inlineCode",{parentName:"a"},"nonblock-statement-body-position"))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"// bad \ud83d\udc4e\nif (test)\n  return false;\n\n// good \ud83d\udc4d\nif (test) return false;\n\n// good \ud83d\udc4d\nif (test) {\n  return false;\n}\n\n// bad \ud83d\udc4e\nfunction foo() { return false; }\n\n// good \ud83d\udc4d\nfunction bar() {\n  return false;\n}\n")),(0,r.kt)("h3",{id:"brace-style"},"Brace Style"),(0,r.kt)("p",null,"If you're using multiline blocks with ",(0,r.kt)("inlineCode",{parentName:"p"},"if")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"else"),", put ",(0,r.kt)("inlineCode",{parentName:"p"},"else")," on the same line. as your ",(0,r.kt)("inlineCode",{parentName:"p"},"if")," block's closing brace."),(0,r.kt)("p",null,"eslint: ",(0,r.kt)("a",{parentName:"p",href:"https://eslint.org/docs/rules/brace-style.html"},(0,r.kt)("inlineCode",{parentName:"a"},"brace-style"))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"// bad \ud83d\udc4e\nif (test) {\n  thing1();\n  thing2();\n} else {\n  thing3();\n}\n\n// good \ud83d\udc4d\nif (test) {\n  thing1();\n  thing2();\n} else {\n  thing3();\n}\n")),(0,r.kt)("h3",{id:"no-else-return"},"No Else Return"),(0,r.kt)("p",null,"If an ",(0,r.kt)("inlineCode",{parentName:"p"},"if")," block always executes a ",(0,r.kt)("inlineCode",{parentName:"p"},"return")," statement, the subsequent ",(0,r.kt)("inlineCode",{parentName:"p"},"else")," block is unnecessary."),(0,r.kt)("p",null,"A ",(0,r.kt)("inlineCode",{parentName:"p"},"return")," in an ",(0,r.kt)("inlineCode",{parentName:"p"},"else if")," block following an ",(0,r.kt)("inlineCode",{parentName:"p"},"if")," block that contains a ",(0,r.kt)("inlineCode",{parentName:"p"},"return")," can be separated into multiple ",(0,r.kt)("inlineCode",{parentName:"p"},"if")," blocks. eslint: ",(0,r.kt)("a",{parentName:"p",href:"https://eslint.org/docs/rules/no-else-return"},(0,r.kt)("inlineCode",{parentName:"a"},"no-else-return"))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"// bad \ud83d\udc4e\nfunction foo() {\n  if (x) {\n    return x;\n  } else {\n    return y;\n  }\n}\n\n// bad \ud83d\udc4e\nfunction cats() {\n  if (x) {\n    return x;\n  } else if (y) {\n    return y;\n  }\n}\n\n// bad \ud83d\udc4e\nfunction dogs() {\n  if (x) {\n    return x;\n  } else {\n    if (y) {\n      return y;\n    }\n  }\n}\n\n// good \ud83d\udc4d\nfunction foo() {\n  if (x) {\n    return x;\n  }\n\n  return y;\n}\n\n// good \ud83d\udc4d\nfunction cats() {\n  if (x) {\n    return x;\n  }\n\n  if (y) {\n    return y;\n  }\n}\n\n// good \ud83d\udc4d\nfunction dogs(x) {\n  if (x) {\n    if (z) {\n      return y;\n    }\n  } else {\n    return z;\n  }\n}\n")),(0,r.kt)("h2",{id:"control-statements"},"Control Statements"),(0,r.kt)("h3",{id:"new-line-condition"},"New Line Condition"),(0,r.kt)("p",null,"In case your control statement (",(0,r.kt)("inlineCode",{parentName:"p"},"if"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"while")," etc.) gets too long or exceeds the maximum line length, each (grouped) condition could be put into a new line. The logical operator should begin the line."),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"IMPORTANCE: This also improves readability by making it easier to visually follow complex logic.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"// bad \ud83d\udc4e\nif ((foo === 123 || bar === 'abc') && doesItLookGoodWhenItBecomesThatLong() && isThisReallyHappening()) {\n  thing1();\n}\n\n// bad \ud83d\udc4e\nif (foo === 123 &&\n  bar === 'abc') {\n  thing1();\n}\n\n// bad \ud83d\udc4e\nif (foo === 123\n  && bar === 'abc') {\n  thing1();\n}\n\n// bad \ud83d\udc4e\nif (\n  foo === 123 &&\n  bar === 'abc'\n) {\n  thing1();\n}\n\n// good \ud83d\udc4d\nif (\n    foo === 123\n    && bar === 'abc'\n) {\n  thing1();\n}\n\n// good \ud83d\udc4d\nif (\n  (foo === 123 || bar === 'abc')\n  && doesItLookGoodWhenItBecomesThatLong()\n  && isThisReallyHappening()\n) {\n  thing1();\n}\n\n// good \ud83d\udc4d\nif (foo === 123 && bar === 'abc') {\n  thing1();\n}\n")),(0,r.kt)("h3",{id:"selection-operators"},"Selection Operators"),(0,r.kt)("p",null,"Don't use selection operators in place of control statements."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"// bad \ud83d\udc4e\n!isRunning && startRunning();\n\n// good \ud83d\udc4d\nif (!isRunning) {\n  startRunning();\n}\n")),(0,r.kt)("h2",{id:"comments"},"Comments"),(0,r.kt)("h3",{id:"multiline-comments"},"Multiline Comments"),(0,r.kt)("p",null,"Use ",(0,r.kt)("inlineCode",{parentName:"p"},"/** ... */")," for multiline comments."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"// bad \ud83d\udc4e\n// make() returns a new element\n// based on the passed in tag name\n//\n// @param {String} tag\n// @return {Element} element\nfunction make(tag) {\n  // ...\n\n  return element;\n}\n\n// good \ud83d\udc4d\n/**\n * make() returns a new element\n * based on the passed-in tag name\n */\nfunction make(tag) {\n  // ...\n\n  return element;\n}\n")),(0,r.kt)("h3",{id:"single-line-comments"},"Single Line Comments"),(0,r.kt)("p",null,"Use ",(0,r.kt)("inlineCode",{parentName:"p"},"//")," for single line comments."),(0,r.kt)("p",null,"Place single line comments on a newline above the subject of the comment. Put an empty line before the comment unless it's on the first line of a block."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"// bad \ud83d\udc4e\nconst active = true; // is current tab\n\n// good \ud83d\udc4d\n// is current tab\nconst active = true;\n\n// bad \ud83d\udc4e\nfunction getType() {\n  console.log('fetching type...');\n  // set the default type to 'no type'\n  const type = this.type || 'no type';\n\n  return type;\n}\n\n// good \ud83d\udc4d\nfunction getType() {\n  console.log('fetching type...');\n\n  // set the default type to 'no type'\n  const type = this.type || 'no type';\n\n  return type;\n}\n\n// also good\nfunction getType() {\n  // set the default type to 'no type'\n  const type = this.type || 'no type';\n\n  return type;\n}\n")),(0,r.kt)("h3",{id:"spaced-comment"},"Spaced Comment"),(0,r.kt)("p",null,"Start all comments with a space to make it easier to read."),(0,r.kt)("p",null,"eslint: ",(0,r.kt)("a",{parentName:"p",href:"https://eslint.org/docs/rules/spaced-comment"},(0,r.kt)("inlineCode",{parentName:"a"},"spaced-comment"))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"// bad \ud83d\udc4e\n//is current tab\nconst active = true;\n\n// good \ud83d\udc4d\n// is current tab\nconst active = true;\n\n// bad \ud83d\udc4e\n/**\n *make() returns a new element\n *based on the passed-in tag name\n */\nfunction make(tag) {\n  // ...\n\n  return element;\n}\n\n// good \ud83d\udc4d\n/**\n * make() returns a new element\n * based on the passed-in tag name\n */\nfunction make(tag) {\n  // ...\n\n  return element;\n}\n")),(0,r.kt)("h3",{id:"fixme-or-todo"},(0,r.kt)("inlineCode",{parentName:"h3"},"FIXME")," or ",(0,r.kt)("inlineCode",{parentName:"h3"},"TODO")),(0,r.kt)("p",null,"Prefixing your comments with ",(0,r.kt)("inlineCode",{parentName:"p"},"FIXME")," or ",(0,r.kt)("inlineCode",{parentName:"p"},"TODO")," helps other developers quickly understand."),(0,r.kt)("h4",{id:"use--fixme-to-annotate-problems"},"Use ",(0,r.kt)("inlineCode",{parentName:"h4"},"// FIXME:")," to annotate problems."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"class Calculator extends Abacus {\n  constructor() {\n    super();\n\n    // FIXME: shouldn't use a global here\n    total = 0;\n  }\n}\n")),(0,r.kt)("h4",{id:"use--todo-to-annotate-solutions-to-problems"},"Use ",(0,r.kt)("inlineCode",{parentName:"h4"},"// TODO:")," to annotate solutions to problems."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"class Calculator extends Abacus {\n  constructor() {\n    super();\n\n    // TODO: total should be configurable by an options param\n    this.total = 0;\n  }\n}\n")),(0,r.kt)("h2",{id:"commas"},"Commas"),(0,r.kt)("h3",{id:"leading-commas-nope"},"Leading commas: ",(0,r.kt)("strong",{parentName:"h3"},"Nope.")),(0,r.kt)("p",null,"eslint: ",(0,r.kt)("a",{parentName:"p",href:"https://eslint.org/docs/rules/comma-style.html"},(0,r.kt)("inlineCode",{parentName:"a"},"comma-style"))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"// bad \ud83d\udc4e\nconst story = [\n  once\n  , upon\n  , aTime\n];\n\n// good \ud83d\udc4d\nconst story = [\n  once,\n  upon,\n  aTime,\n];\n\n// bad \ud83d\udc4e\nconst hero = {\n  firstName: 'Ada'\n  , lastName: 'Lovelace'\n  , birthYear: 1815\n  , superPower: 'computers'\n};\n\n// good \ud83d\udc4d\nconst hero = {\n  firstName: 'Ada',\n  lastName: 'Lovelace',\n  birthYear: 1815,\n  superPower: 'computers',\n};\n")),(0,r.kt)("h3",{id:"additional-trailing-comma-yup"},"Additional trailing comma: ",(0,r.kt)("strong",{parentName:"h3"},"Yup.")),(0,r.kt)("p",null,"eslint: ",(0,r.kt)("a",{parentName:"p",href:"https://eslint.org/docs/rules/comma-dangle.html"},(0,r.kt)("inlineCode",{parentName:"a"},"comma-dangle"))),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"Why? This leads to cleaner git diffs. Also, transpilers like Babel will remove the additional trailing comma in the transpiled code which means you don\u2019t have to worry about the ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/airbnb/javascript/blob/es5-deprecated/es5/README.md#commas"},"trailing comma problem")," in legacy browsers.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-diff"},"// bad \ud83d\udc4e - git diff without trailing comma\nconst hero = {\n        firstName: 'Florence',\n-    lastName: 'Nightingale'\n+    lastName: 'Nightingale',\n+    inventorOf: ['coxcomb chart', 'modern nursing']\n};\n\n// good \ud83d\udc4d  - git diff with trailing comma\nconst hero = {\n        firstName: 'Florence',\n        lastName: 'Nightingale',\n+    inventorOf: ['coxcomb chart', 'modern nursing'],\n};\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"// bad \ud83d\udc4e\nconst hero = {\n  firstName: 'Dana',\n  lastName: 'Scully'\n};\n\nconst heroes = [\n  'Batman',\n  'Superman'\n];\n\n// good \ud83d\udc4d\nconst hero = {\n  firstName: 'Dana',\n  lastName: 'Scully',\n};\n\nconst heroes = [\n  'Batman',\n  'Superman',\n];\n\n// bad \ud83d\udc4e\nfunction createHero(\n  firstName,\n  lastName,\n  inventorOf\n) {\n    // does nothing\n}\n\n// good \ud83d\udc4d\nfunction createHero(\n  firstName,\n  lastName,\n  inventorOf,\n) {\n    // does nothing\n}\n\n// good \ud83d\udc4d  (note that a comma must not appear after a \"rest\" element)\nfunction createHero(\n  firstName,\n  lastName,\n  inventorOf,\n  ...heroArgs\n) {\n    // does nothing\n}\n\n// bad \ud83d\udc4e\ncreateHero(\n  firstName,\n  lastName,\n  inventorOf\n);\n\n// good \ud83d\udc4d\ncreateHero(\n  firstName,\n  lastName,\n  inventorOf,\n);\n\n// good \ud83d\udc4d  (note that a comma must not appear after a \"rest\" element)\ncreateHero(\n  firstName,\n  lastName,\n  inventorOf,\n  ...heroArgs\n);\n")),(0,r.kt)("h2",{id:"semicolons"},"Semicolons"),(0,r.kt)("h3",{id:"yup"},(0,r.kt)("strong",{parentName:"h3"},"Yup.")),(0,r.kt)("p",null,"eslint: ",(0,r.kt)("a",{parentName:"p",href:"https://eslint.org/docs/rules/semi.html"},(0,r.kt)("inlineCode",{parentName:"a"},"semi"))),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"Why? When JavaScript encounters a line break without a semicolon, it uses a set of rules called ",(0,r.kt)("a",{parentName:"p",href:"https://tc39.github.io/ecma262/#sec-automatic-semicolon-insertion"},"Automatic Semicolon Insertion")," to determine whether or not it should regard that line break as the end of a statement, and (as the name implies) place a semicolon into your code before the line break if it thinks so. ASI contains a few eccentric behaviors, though, and your code will break if JavaScript misinterprets your line break. These rules will become more complicated as new features become a part of JavaScript. Explicitly terminating your statements and configuring your linter to catch missing semicolons will help prevent you from encountering issues.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"// bad \ud83d\udc4e - raises exception\nconst luke = {}\nconst leia = {}\n[luke, leia].forEach((jedi) => jedi.father = 'vader')\n\n// bad \ud83d\udc4e - raises exception\nconst reaction = \"No! That\u2019s impossible!\"\n(async function meanwhileOnTheFalcon() {\n    // handle `leia`, `lando`, `chewie`, `r2`, `c3p0`\n    // ...\n}())\n\n// bad \ud83d\udc4e - returns `undefined` instead of the value on the next line - always happens when `return` is on a line by itself because of ASI!\nfunction foo() {\n    return\n    'search your feelings, you know it to be foo'\n}\n\n// good \ud83d\udc4d\nconst luke = {};\nconst leia = {};\n[luke, leia].forEach((jedi) => {\n    jedi.father = 'vader';\n});\n\n// good \ud83d\udc4d\nconst reaction = \"No! That\u2019s impossible!\";\n(async function meanwhileOnTheFalcon() {\n    // handle `leia`, `lando`, `chewie`, `r2`, `c3p0`\n    // ...\n}());\n\n// good \ud83d\udc4d\nfunction foo() {\n    return 'search your feelings, you know it to be foo';\n}\n")),(0,r.kt)("h2",{id:"type-casting--coercion"},"Type Casting & Coercion"),(0,r.kt)("h3",{id:"type-coercion-at-start"},"Type Coercion at Start"),(0,r.kt)("p",null,"Perform type coercion at the beginning of the statement."),(0,r.kt)("h3",{id:"strings-1"},"Strings"),(0,r.kt)("p",null,"eslint: ",(0,r.kt)("a",{parentName:"p",href:"https://eslint.org/docs/rules/no-new-wrappers"},(0,r.kt)("inlineCode",{parentName:"a"},"no-new-wrappers"))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},'// => this.reviewScore = 9;\n\n// bad \ud83d\udc4e\nconst totalScore = new String(this.reviewScore); // typeof totalScore is "object" not "string"\n\n// bad \ud83d\udc4e\nconst totalScore = this.reviewScore + \'\'; // invokes this.reviewScore.valueOf()\n\n// bad \ud83d\udc4e\nconst totalScore = this.reviewScore.toString(); // isn\u2019t guaranteed to return a string\n\n// good \ud83d\udc4d\nconst totalScore = String(this.reviewScore);\n')),(0,r.kt)("h3",{id:"numbers"},"Numbers"),(0,r.kt)("p",null,"Use ",(0,r.kt)("inlineCode",{parentName:"p"},"Number")," for type casting and ",(0,r.kt)("inlineCode",{parentName:"p"},"parseInt")," always with a radix for parsing strings."),(0,r.kt)("p",null,"eslint: ",(0,r.kt)("a",{parentName:"p",href:"https://eslint.org/docs/rules/radix"},(0,r.kt)("inlineCode",{parentName:"a"},"radix"))," ",(0,r.kt)("a",{parentName:"p",href:"https://eslint.org/docs/rules/no-new-wrappers"},(0,r.kt)("inlineCode",{parentName:"a"},"no-new-wrappers"))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"const inputValue = '4';\n\n// bad \ud83d\udc4e\nconst val = new Number(inputValue);\n\n// bad \ud83d\udc4e\nconst val = +inputValue;\n\n// bad \ud83d\udc4e\nconst val = inputValue >> 0;\n\n// bad \ud83d\udc4e\nconst val = parseInt(inputValue);\n\n// good \ud83d\udc4d\nconst val = Number(inputValue);\n\n// good \ud83d\udc4d\nconst val = parseInt(inputValue, 10);\n")),(0,r.kt)("h3",{id:"parseint"},(0,r.kt)("inlineCode",{parentName:"h3"},"parseInt")),(0,r.kt)("p",null,"If for whatever reason you are doing something wild and ",(0,r.kt)("inlineCode",{parentName:"p"},"parseInt")," is your bottleneck and need to use Bitshift for ",(0,r.kt)("a",{parentName:"p",href:"https://jsperf.com/coercion-vs-casting/3"},"performance reasons"),", leave a comment explaining why and what you\u2019re doing."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"// good \ud83d\udc4d\n/**\n * parseInt was the reason my code was slow.\n * Bitshifting the String to coerce it to a\n * Number made it a lot faster.\n */\nconst val = inputValue >> 0;\n")),(0,r.kt)("h3",{id:"bitshift-operations"},"Bitshift Operations"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Note:")," Be careful when using bitshift operations. Numbers are represented as ",(0,r.kt)("a",{parentName:"p",href:"https://es5.github.io/#x4.3.19"},"64-bit values"),", but bitshift operations always return a 32-bit integer (",(0,r.kt)("a",{parentName:"p",href:"https://es5.github.io/#x11.7"},"source"),"). Bitshift can lead to unexpected behavior for integer values larger than 32 bits. ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/airbnb/javascript/issues/109"},"Discussion"),". Largest signed 32-bit Int is 2,147,483,647:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"2147483647 >> 0; // => 2147483647\n2147483648 >> 0; // => -2147483648\n2147483649 >> 0; // => -2147483647\n")),(0,r.kt)("h3",{id:"booleans"},"Booleans"),(0,r.kt)("p",null,"eslint: ",(0,r.kt)("a",{parentName:"p",href:"https://eslint.org/docs/rules/no-new-wrappers"},(0,r.kt)("inlineCode",{parentName:"a"},"no-new-wrappers"))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"const age = 0;\n\n// bad \ud83d\udc4e\nconst hasAge = new Boolean(age);\n\n// good \ud83d\udc4d\nconst hasAge = Boolean(age);\n\n// best\nconst hasAge = !!age;\n")),(0,r.kt)("h2",{id:"naming-conventions"},"Naming Conventions"),(0,r.kt)("h3",{id:"naming-length"},"Naming Length"),(0,r.kt)("p",null,"Avoid single letter names. Be descriptive with your naming."),(0,r.kt)("p",null,"eslint: ",(0,r.kt)("a",{parentName:"p",href:"https://eslint.org/docs/rules/id-length"},(0,r.kt)("inlineCode",{parentName:"a"},"id-length"))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"// bad \ud83d\udc4e\nfunction q() {\n    // ...\n}\n\n// good \ud83d\udc4d\nfunction query() {\n    // ...\n}\n")),(0,r.kt)("h3",{id:"camelcase"},"camelCase"),(0,r.kt)("p",null,"Use camelCase when naming objects, functions, and instances."),(0,r.kt)("p",null,"eslint: ",(0,r.kt)("a",{parentName:"p",href:"https://eslint.org/docs/rules/camelcase.html"},(0,r.kt)("inlineCode",{parentName:"a"},"camelcase"))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"// bad \ud83d\udc4e\nconst OBJEcttsssss = {};\nconst this_is_my_object = {};\nfunction c() {}\n\n// good \ud83d\udc4d\nconst thisIsMyObject = {};\nfunction thisIsMyFunction() {}\n")),(0,r.kt)("h4",{id:"camelcase-export-usage"},"camelCase Export Usage"),(0,r.kt)("p",null,"Use camelCase when you export-default a function. Your filename should be identical to your function\u2019s name."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"function makeStyleGuide() {\n    // ...\n}\n\nexport default makeStyleGuide;\n")),(0,r.kt)("h4",{id:"more-camelcase-usage"},"More camelCase Usage"),(0,r.kt)("p",null,"Use camelCase for variables, properties and function names"),(0,r.kt)("p",null,"Variables, properties and function names should use camelCase. They should also be descriptive. Single character variables and uncommon abbreviations should generally be avoided."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"// bad \ud83d\udc4e\nvar admin_user = db.query('SELECT * FROM users ...');\n\n// good \ud83d\udc4d\nvar adminUser = db.query('SELECT * FROM users ...');\n")),(0,r.kt)("h3",{id:"pascalcase"},"PascalCase"),(0,r.kt)("p",null,"Use PascalCase only when naming constructors or classes."),(0,r.kt)("p",null,"eslint: ",(0,r.kt)("a",{parentName:"p",href:"https://eslint.org/docs/rules/new-cap.html"},(0,r.kt)("inlineCode",{parentName:"a"},"new-cap"))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"// bad \ud83d\udc4e\nfunction user(options) {\n    this.name = options.name;\n}\n\nconst bad = new user({\n    name: 'nope',\n});\n\n// good \ud83d\udc4d\nclass User {\n  constructor(options) {\n    this.name = options.name;\n  }\n}\n\nconst good = new User({\n  name: 'yup',\n});\n")),(0,r.kt)("h4",{id:"pascalcase-export-usage"},"PascalCase Export Usage"),(0,r.kt)("p",null,"Use PascalCase when you export a constructor / class / singleton / function library / bare object."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"const AirbnbStyleGuide = {\n  es6: {\n  },\n};\n\nexport default AirbnbStyleGuide;\n")),(0,r.kt)("h3",{id:"no-underscore-dangle"},"No Underscore Dangle"),(0,r.kt)("p",null,"Do not use trailing or leading underscores."),(0,r.kt)("p",null,"eslint: ",(0,r.kt)("a",{parentName:"p",href:"https://eslint.org/docs/rules/no-underscore-dangle.html"},(0,r.kt)("inlineCode",{parentName:"a"},"no-underscore-dangle"))),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"Why? JavaScript does not have the concept of privacy in terms of properties or methods. Although a leading underscore is a common convention to mean \u201cprivate\u201d, in fact, these properties are fully public, and as such, are part of your public API contract. This convention might lead developers to wrongly think that a change won\u2019t count as breaking, or that tests aren\u2019t needed. tl;dr: if you want something to be \u201cprivate\u201d, it must not be observably present.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"// bad \ud83d\udc4e\nthis.__firstName__ = 'Panda';\nthis.firstName_ = 'Panda';\nthis._firstName = 'Panda';\n\n// good \ud83d\udc4d\nthis.firstName = 'Panda';\n\n// good \ud83d\udc4d , in environments where WeakMaps are available\n// see https://kangax.github.io/compat-table/es6/#test-WeakMap\nconst firstNames = new WeakMap();\nfirstNames.set(this, 'Panda');\n")),(0,r.kt)("h3",{id:"no-this-references"},"No ",(0,r.kt)("inlineCode",{parentName:"h3"},"this")," References"),(0,r.kt)("p",null,"Don\u2019t save references to ",(0,r.kt)("inlineCode",{parentName:"p"},"this"),". Use arrow functions or ",(0,r.kt)("a",{parentName:"p",href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/bind"},"Function#bind"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"// bad \ud83d\udc4e\nfunction foo() {\n  const self = this;\n  return function () {\n    console.log(self);\n  };\n}\n\n// bad \ud83d\udc4e\nfunction foo() {\n  const that = this;\n  return function () {\n    console.log(that);\n  };\n}\n\n// good \ud83d\udc4d\nfunction foo() {\n  return () => {\n    console.log(this);\n  };\n}\n")),(0,r.kt)("h3",{id:"filename-export-matching"},"Filename Export Matching"),(0,r.kt)("p",null,"A base filename should exactly match the name of its default export."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"// file 1 contents\nclass CheckBox {\n    // ...\n}\nexport default CheckBox;\n\n// file 2 contents\nexport default function fortyTwo() { return 42; }\n\n// file 3 contents\nexport default function insideDirectory() {}\n\n// in some other file\n// bad \ud83d\udc4e\nimport CheckBox from './checkBox'; // PascalCase import/export, camelCase filename\nimport FortyTwo from './FortyTwo'; // PascalCase import/filename, camelCase export\nimport InsideDirectory from './InsideDirectory'; // PascalCase import/filename, camelCase export\n\n// bad \ud83d\udc4e\nimport CheckBox from './check_box'; // PascalCase import/export, snake_case filename\nimport forty_two from './forty_two'; // snake_case import/filename, camelCase export\nimport inside_directory from './inside_directory'; // snake_case import, camelCase export\nimport index from './inside_directory/index'; // requiring the index file explicitly\nimport insideDirectory from './insideDirectory/index'; // requiring the index file explicitly\n\n// good \ud83d\udc4d\nimport CheckBox from './CheckBox'; // PascalCase export/import/filename\nimport fortyTwo from './fortyTwo'; // camelCase export/import/filename\nimport insideDirectory from './insideDirectory'; // camelCase export/import/directory name/implicit \"index\"\n// ^ supports both insideDirectory.js and insideDirectory/index.js\n")),(0,r.kt)("h3",{id:"acronyms-and-initialisms"},"Acronyms and Initialisms"),(0,r.kt)("p",null,"Acronyms and initialisms should always be all uppercased, or all lowercased."),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"Why? Names are for readability, not to appease a computer algorithm.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"// bad \ud83d\udc4e\nimport SmsContainer from './containers/SmsContainer';\n\n// bad \ud83d\udc4e\nconst HttpRequests = [\n    // ...\n];\n\n// good \ud83d\udc4d\nimport SMSContainer from './containers/SMSContainer';\n\n// good \ud83d\udc4d\nconst HTTPRequests = [\n    // ...\n];\n\n// also good\nconst httpRequests = [\n    // ...\n];\n\n// best\nimport TextMessageContainer from './containers/TextMessageContainer';\n\n// best\nconst requests = [\n    // ...\n];\n")),(0,r.kt)("h3",{id:"optional-uppercase"},"Optional UPPERCASE"),(0,r.kt)("p",null,"You may optionally uppercase a constant only if it (1) is exported, (2) is a ",(0,r.kt)("inlineCode",{parentName:"p"},"const")," (it can not be reassigned), and (3) the programmer can trust it (and its nested properties) to never change."),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"Why? This is an additional tool to assist in situations where the programmer would be unsure if a variable might ever change. UPPERCASE_VARIABLES are letting the programmer know that they can trust the variable (and its properties) not to change."),(0,r.kt)("ul",{parentName:"blockquote"},(0,r.kt)("li",{parentName:"ul"},"What about all ",(0,r.kt)("inlineCode",{parentName:"li"},"const")," variables? - This is unnecessary, so uppercasing should not be used for constants within a file. It should be used for exported constants however."),(0,r.kt)("li",{parentName:"ul"},"What about exported objects? - Uppercase at the top level of export (e.g. ",(0,r.kt)("inlineCode",{parentName:"li"},"EXPORTED_OBJECT.key"),") and maintain that all nested properties do not change."))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"// bad \ud83d\udc4e\nconst PRIVATE_VARIABLE = 'should not be unnecessarily uppercased within a file';\n\n// bad \ud83d\udc4e\nexport const THING_TO_BE_CHANGED = 'should obviously not be uppercased';\n\n// bad \ud83d\udc4e\nexport let REASSIGNABLE_VARIABLE = 'do not use let with uppercase variables';\n\n// ---\n\n// allowed but does not supply semantic value\nexport const apiKey = 'SOMEKEY';\n\n// better in most cases\nexport const API_KEY = 'SOMEKEY';\n\n// ---\n\n// bad \ud83d\udc4e - unnecessarily uppercases key while adding no semantic value\nexport const MAPPING = {\n    KEY: 'value'\n};\n\n// good \ud83d\udc4d\nexport const MAPPING = {\n    key: 'value'\n};\n")),(0,r.kt)("h4",{id:"use-uppercase-for-constants"},"Use UPPERCASE for Constants"),(0,r.kt)("p",null,"Constants should be declared as regular variables or static class properties, using all uppercase letters."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"// bad \ud83d\udc4e\nconst second = 1 * 1000;\nfunction File() {\n}\nFile.fullPermissions = 0777;\n\n// good \ud83d\udc4d\nvar SECOND = 1 * 1000;\nfunction File() {\n}\nFile.FULL_PERMISSIONS = 0777;\n")),(0,r.kt)("h2",{id:"accessors"},"Accessors"),(0,r.kt)("h3",{id:"accessor-functions"},"Accessor Functions"),(0,r.kt)("p",null,"Accessor functions for properties are not required."),(0,r.kt)("h3",{id:"getters--setters"},"Getters / Setters"),(0,r.kt)("p",null,"Do not use JavaScript getters/setters as they cause unexpected side effects and are harder to test, maintain, and reason about. Instead, if you do make accessor functions, use ",(0,r.kt)("inlineCode",{parentName:"p"},"getVal()")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"setVal('hello')"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"// bad \ud83d\udc4e\nclass Dragon {\n    get age() {\n    // ...\n    }\n\n    set age(value) {\n    // ...\n    }\n}\n\n// good \ud83d\udc4d\nclass Dragon {\n    getAge() {\n    // ...\n    }\n\n    setAge(value) {\n    // ...\n    }\n}\n")),(0,r.kt)("h3",{id:"boolean-property"},(0,r.kt)("inlineCode",{parentName:"h3"},"boolean")," Property"),(0,r.kt)("p",null,"If the property/method is a ",(0,r.kt)("inlineCode",{parentName:"p"},"boolean"),", use ",(0,r.kt)("inlineCode",{parentName:"p"},"isVal()")," or ",(0,r.kt)("inlineCode",{parentName:"p"},"hasVal()"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"// bad \ud83d\udc4e\nif (!dragon.age()) {\n    return false;\n}\n\n// good \ud83d\udc4d\nif (!dragon.hasAge()) {\n    return false;\n}\n")),(0,r.kt)("p",null,"It\u2019s okay to create ",(0,r.kt)("inlineCode",{parentName:"p"},"get()")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"set()")," functions, but be consistent."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"class Jedi {\n  constructor(options = {}) {\n  const lightsaber = options.lightsaber || 'blue';\n    this.set('lightsaber', lightsaber);\n  }\n\n  set(key, val) {\n    this[key] = val;\n  }\n\n  get(key) {\n    return this[key];\n  }\n}\n")),(0,r.kt)("h2",{id:"events"},"Events"),(0,r.kt)("h3",{id:"data-payloads"},"Data Payloads"),(0,r.kt)("p",null,'When attaching data payloads to events (whether DOM events or something more proprietary like Backbone events), pass an object literal (also known as a "hash") instead of a raw value. This allows a subsequent contributor to add more data to the event payload without finding and updating every handler for the event. For example, instead of:'),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"// bad \ud83d\udc4e\n$(this).trigger('listingUpdated', listing.id);\n\n// ...\n\n$(this).on('listingUpdated', (e, listingID) => {\n    // do something with listingID\n});\n")),(0,r.kt)("p",null,"prefer:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"// good \ud83d\udc4d\n$(this).trigger('listingUpdated', { listingID: listing.id });\n\n// ...\n\n$(this).on('listingUpdated', (e, data) => {\n    // do something with data.listingID\n});\n")),(0,r.kt)("h2",{id:"jquery"},"jQuery"),(0,r.kt)("h3",{id:"jquery-object-variables"},"jQuery Object Variables"),(0,r.kt)("p",null,"Prefix jQuery object variables with a ",(0,r.kt)("inlineCode",{parentName:"p"},"$"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"// bad \ud83d\udc4e\nconst sidebar = $('.sidebar');\n\n// good \ud83d\udc4d\nconst $sidebar = $('.sidebar');\n\n// good \ud83d\udc4d\nconst $sidebarBtn = $('.sidebar-btn');\n")),(0,r.kt)("h3",{id:"cache-jquery-lookups"},"Cache jQuery lookups."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"// bad \ud83d\udc4e\nfunction setSidebar() {\n  $('.sidebar').hide();\n\n  // ...\n\n  $('.sidebar').css({\n    'background-color': 'pink',\n  });\n}\n\n// good \ud83d\udc4d\nfunction setSidebar() {\n  const $sidebar = $('.sidebar');\n  $sidebar.hide();\n\n  // ...\n\n  $sidebar.css({\n    'background-color': 'pink',\n  });\n}\n")),(0,r.kt)("h3",{id:"dom-queries"},"DOM Queries"),(0,r.kt)("p",null,"For DOM queries use Cascading ",(0,r.kt)("inlineCode",{parentName:"p"},"$('.sidebar ul')")," or parent > child ",(0,r.kt)("inlineCode",{parentName:"p"},"$('.sidebar > ul')"),"."),(0,r.kt)("p",null,"Performance Testing Link - ",(0,r.kt)("a",{parentName:"p",href:"http://jsperf.com/jquery-find-vs-context-sel/16"},"jsPerf")),(0,r.kt)("h3",{id:"scoped-jquery-object-queries"},"Scoped jQuery Object Queries"),(0,r.kt)("p",null,"Use ",(0,r.kt)("inlineCode",{parentName:"p"},"find")," with scoped jQuery object queries."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"// bad \ud83d\udc4e\n$('ul', '.sidebar').hide();\n\n// bad \ud83d\udc4e\n$('.sidebar').find('ul').hide();\n\n// good \ud83d\udc4d\n$('.sidebar ul').hide();\n\n// good \ud83d\udc4d\n$('.sidebar > ul').hide();\n\n// good \ud83d\udc4d\n$sidebar.find('ul').hide();\n")),(0,r.kt)("h2",{id:"ecmascript-5-compatibility"},"ECMAScript 5 Compatibility"),(0,r.kt)("h3",{id:"kangax"},"Kangax"),(0,r.kt)("p",null,"Refer to ",(0,r.kt)("a",{parentName:"p",href:"https://twitter.com/kangax/"},"Kangax"),"\u2019s ES5 ",(0,r.kt)("a",{parentName:"p",href:"https://kangax.github.io/es5-compat-table/"},"compatibility table"),"."),(0,r.kt)("h2",{id:"ecmascript-6-es-2015-styles"},"ECMAScript 6+ (ES 2015+) Styles"),(0,r.kt)("h3",{id:"es6-features"},"ES6+ Features"),(0,r.kt)("p",null,"This is a collection of links to the various ES6+ features."),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("a",{parentName:"p",href:"#arrow-functions"},"Arrow Functions"))),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("a",{parentName:"p",href:"#classes--constructors"},"Classes"))),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("a",{parentName:"p",href:"#es6-object-shorthand"},"Object Shorthand"))),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("a",{parentName:"p",href:"#es6-object-concise"},"Object Concise"))),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("a",{parentName:"p",href:"#es6-computed-properties"},"Object Computed Properties"))),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("a",{parentName:"p",href:"#es6-template-literals"},"Template Strings"))),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("a",{parentName:"p",href:"#destructuring"},"Destructuring"))),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("a",{parentName:"p",href:"#es6-default-parameters"},"Default Parameters"))),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("a",{parentName:"p",href:"#es6-rest"},"Rest"))),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("a",{parentName:"p",href:"#es6-array-spreads"},"Array Spreads"))),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("a",{parentName:"p",href:"#references"},"Let and Const"))),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("a",{parentName:"p",href:"#es2016-properties--exponentiation-operator"},"Exponentiation Operator"))),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("a",{parentName:"p",href:"#iterators-and-generators"},"Iterators and Generators"))),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("a",{parentName:"p",href:"#modules"},"Modules")),(0,r.kt)("a",{name:"tc39-proposals"}))),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("a",{parentName:"p",href:"#tc39-proposals"},"28.2")," Do not use ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/tc39/proposals"},"TC39 proposals")," that have not reached stage 3."),(0,r.kt)("blockquote",{parentName:"li"},(0,r.kt)("p",{parentName:"blockquote"},"Why? ",(0,r.kt)("a",{parentName:"p",href:"https://tc39.github.io/process-document/"},"They are not finalized"),", and they are subject to change or to be withdrawn entirely. We want to use JavaScript, and proposals are not JavaScript yet.")))),(0,r.kt)("h2",{id:"standard-library"},"Standard Library"),(0,r.kt)("p",null,"The ",(0,r.kt)("a",{parentName:"p",href:"https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects"},"Standard Library"),"\ncontains utilities that are functionally broken but remain for legacy reasons."),(0,r.kt)("h3",{id:"numberisnan"},(0,r.kt)("inlineCode",{parentName:"h3"},"Number.isNaN")),(0,r.kt)("p",null,"Use ",(0,r.kt)("inlineCode",{parentName:"p"},"Number.isNaN")," instead of global ",(0,r.kt)("inlineCode",{parentName:"p"},"isNaN"),"."),(0,r.kt)("p",null,"eslint: ",(0,r.kt)("a",{parentName:"p",href:"https://eslint.org/docs/rules/no-restricted-globals"},(0,r.kt)("inlineCode",{parentName:"a"},"no-restricted-globals"))),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"Why? The global ",(0,r.kt)("inlineCode",{parentName:"p"},"isNaN")," coerces non-numbers to numbers, returning true for anything that coerces to NaN.\nIf this behavior is desired, make it explicit.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"// bad \ud83d\udc4e\nisNaN('1.2'); // false\nisNaN('1.2.3'); // true\n\n// good \ud83d\udc4d\nNumber.isNaN('1.2.3'); // false\nNumber.isNaN(Number('1.2.3')); // true\n")),(0,r.kt)("h3",{id:"numberisfinite"},(0,r.kt)("inlineCode",{parentName:"h3"},"Number.isFinite")),(0,r.kt)("p",null,"Use ",(0,r.kt)("inlineCode",{parentName:"p"},"Number.isFinite")," instead of global ",(0,r.kt)("inlineCode",{parentName:"p"},"isFinite"),"."),(0,r.kt)("p",null,"eslint: ",(0,r.kt)("a",{parentName:"p",href:"https://eslint.org/docs/rules/no-restricted-globals"},(0,r.kt)("inlineCode",{parentName:"a"},"no-restricted-globals"))),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"Why? The global ",(0,r.kt)("inlineCode",{parentName:"p"},"isFinite")," coerces non-numbers to numbers, returning true for anything that coerces to a finite number.\nIf this behavior is desired, make it explicit.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"// bad \ud83d\udc4e\nisFinite('2e3'); // true\n\n// good \ud83d\udc4d\nNumber.isFinite('2e3'); // false\nNumber.isFinite(parseInt('2e3', 10)); // true\n")),(0,r.kt)("h2",{id:"testing"},"Testing"),(0,r.kt)("h3",{id:"yup-1"},(0,r.kt)("strong",{parentName:"h3"},"Yup.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"function foo() {\n    return true;\n}\n")),(0,r.kt)("h3",{id:"no-but-seriously"},(0,r.kt)("strong",{parentName:"h3"},"No, but seriously"),":"),(0,r.kt)("blockquote",null,(0,r.kt)("ul",{parentName:"blockquote"},(0,r.kt)("li",{parentName:"ul"},"Whichever testing framework you use, you should be writing tests!",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"Strive to write many small pure functions, and minimize where mutations occur."),(0,r.kt)("li",{parentName:"ul"},"Be cautious about stubs and mocks - they can make your tests more brittle."),(0,r.kt)("li",{parentName:"ul"},"We primarily use ",(0,r.kt)("a",{parentName:"li",href:"https://www.npmjs.com/package/mocha"},(0,r.kt)("inlineCode",{parentName:"a"},"mocha"))," and ",(0,r.kt)("a",{parentName:"li",href:"https://www.npmjs.com/package/jest"},(0,r.kt)("inlineCode",{parentName:"a"},"jest"))," at Airbnb. ",(0,r.kt)("a",{parentName:"li",href:"https://www.npmjs.com/package/tape"},(0,r.kt)("inlineCode",{parentName:"a"},"tape"))," is also used occasionally for small, separate modules."),(0,r.kt)("li",{parentName:"ul"},"100% test coverage is a good goal to strive for, even if it\u2019s not always practical to reach it."),(0,r.kt)("li",{parentName:"ul"},"Whenever you fix a bug, ",(0,r.kt)("em",{parentName:"li"},"write a regression test"),". A bug fixed without a regression test is almost certainly going to break again in the future."))))),(0,r.kt)("h2",{id:"performance"},"Performance"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://www.kellegous.com/j/2013/01/26/layout-performance/"},"On Layout & Web Performance")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://jsperf.com/string-vs-array-concat/2"},"String vs Array Concat")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://jsperf.com/try-catch-in-loop-cost/12"},"Try/Catch Cost In a Loop")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://jsperf.com/bang-function"},"Bang Function")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://jsperf.com/jquery-find-vs-context-sel/164"},"jQuery Find vs Context, Selector")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://jsperf.com/innerhtml-vs-textcontent-for-script-text"},"innerHTML vs textContent for script text")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://jsperf.com/ya-string-concat/38"},"Long String Concatenation")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://www.quora.com/JavaScript-programming-language-Are-Javascript-functions-like-map-reduce-and-filter-already-optimized-for-traversing-array/answer/Quildreen-Motta"},"Are JavaScript functions like ",(0,r.kt)("inlineCode",{parentName:"a"},"map()"),", ",(0,r.kt)("inlineCode",{parentName:"a"},"reduce()"),", and ",(0,r.kt)("inlineCode",{parentName:"a"},"filter()")," optimized for traversing arrays?"))),(0,r.kt)("h2",{id:"resources"},"Resources"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Learning ES6+")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://tc39.github.io/ecma262/"},"Latest ECMA spec")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"http://exploringjs.com/"},"ExploringJS")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://kangax.github.io/compat-table/es6/"},"ES6 Compatibility Table")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"http://es6-features.org/"},"Comprehensive Overview of ES6 Features"))),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Read This")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"http://www.ecma-international.org/ecma-262/6.0/index.html"},"Standard ECMA-262"))),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Tools")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Code Style Linters",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://eslint.org/"},"ESlint")," - ",(0,r.kt)("a",{parentName:"li",href:"https://github.com/airbnb/javascript/blob/master/linters/.eslintrc"},"Airbnb Style .eslintrc")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"http://jshint.com/"},"JSHint")," - ",(0,r.kt)("a",{parentName:"li",href:"https://github.com/airbnb/javascript/blob/master/linters/.jshintrc"},"Airbnb Style .jshintrc")))),(0,r.kt)("li",{parentName:"ul"},"Neutrino Preset - ",(0,r.kt)("a",{parentName:"li",href:"https://neutrinojs.org/packages/airbnb/"},"@neutrinojs/airbnb"))),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Other Style Guides")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://google.github.io/styleguide/jsguide.html"},"Google JavaScript Style Guide")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://google.github.io/styleguide/javascriptguide.xml"},"Google JavaScript Style Guide (Old)")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://contribute.jquery.org/style-guide/js/"},"jQuery Core Style Guidelines")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://github.com/rwaldron/idiomatic.js"},"Principles of Writing Consistent, Idiomatic JavaScript")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://standardjs.com"},"StandardJS"))),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Other Styles")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://gist.github.com/cjohansen/4135065"},"Naming this in nested functions")," - Christian Johansen"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://github.com/airbnb/javascript/issues/52"},"Conditional Callbacks")," - Ross Allen"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"http://sideeffect.kr/popularconvention/#javascript"},"Popular JavaScript Coding Conventions on GitHub")," - JeongHoon Byun"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"http://benalman.com/news/2012/05/multiple-var-statements-javascript/"},"Multiple var statements in JavaScript, not superfluous")," - Ben Alman")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Further Reading")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://javascriptweblog.wordpress.com/2010/10/25/understanding-javascript-closures/"},"Understanding JavaScript Closures")," - Angus Croll"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"http://www.2ality.com/2013/06/basic-javascript.html"},"Basic JavaScript for the impatient programmer")," - Dr. Axel Rauschmayer"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"http://youmightnotneedjquery.com/"},"You Might Not Need jQuery")," - Zack Bloom & Adam Schwartz"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://github.com/lukehoban/es6features"},"ES6 Features")," - Luke Hoban"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://github.com/bendc/frontend-guidelines"},"Frontend Guidelines")," - Benjamin De Cock")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Books")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://www.amazon.com/JavaScript-Good-Parts-Douglas-Crockford/dp/0596517742"},"JavaScript: The Good Parts")," - Douglas Crockford"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://www.amazon.com/JavaScript-Patterns-Stoyan-Stefanov/dp/0596806752"},"JavaScript Patterns")," - Stoyan Stefanov"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://www.amazon.com/JavaScript-Design-Patterns-Recipes-Problem-Solution/dp/159059908X"},"Pro JavaScript Design Patterns")," - Ross Harmes and Dustin Diaz"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://www.amazon.com/High-Performance-Web-Sites-Essential/dp/0596529309"},"High Performance Web Sites: Essential Knowledge for Front-End Engineers")," - Steve Souders"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://www.amazon.com/Maintainable-JavaScript-Nicholas-C-Zakas/dp/1449327680"},"Maintainable JavaScript")," - Nicholas C. Zakas"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://www.amazon.com/JavaScript-Web-Applications-Alex-MacCaw/dp/144930351X"},"JavaScript Web Applications")," - Alex MacCaw"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://www.amazon.com/Pro-JavaScript-Techniques-John-Resig/dp/1590597273"},"Pro JavaScript Techniques")," - John Resig"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://www.amazon.com/Smashing-Node-js-JavaScript-Everywhere-Magazine/dp/1119962595"},"Smashing Node.js: JavaScript Everywhere")," - Guillermo Rauch"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://www.amazon.com/Secrets-JavaScript-Ninja-John-Resig/dp/193398869X"},"Secrets of the JavaScript Ninja")," - John Resig and Bear Bibeault"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"http://humanjavascript.com/"},"Human JavaScript")," - Henrik Joreteg"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"http://superherojs.com/"},"Superhero.js")," - Kim Joar Bekkelund, Mads Mob\xe6k, & Olav Bjorkoy"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"http://jsbooks.revolunet.com/"},"JSBooks")," - Julien Bouquillon"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://www.manning.com/books/third-party-javascript"},"Third Party JavaScript")," - Ben Vinegar and Anton Kovalyov"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"http://amzn.com/0321812182"},"Effective JavaScript: 68 Specific Ways to Harness the Power of JavaScript")," - David Herman"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"http://eloquentjavascript.net/"},"Eloquent JavaScript")," - Marijn Haverbeke"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"http://shop.oreilly.com/product/0636920033769.do"},"You Don\u2019t Know JS: ES6 & Beyond")," - Kyle Simpson")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Blogs")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"http://javascriptweekly.com/"},"JavaScript Weekly")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://javascriptweblog.wordpress.com/"},"JavaScript, JavaScript...")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://bocoup.com/weblog"},"Bocoup Weblog")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"http://www.adequatelygood.com/"},"Adequately Good")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://www.nczonline.net/"},"NCZOnline")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"http://perfectionkills.com/"},"Perfection Kills")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"http://benalman.com/"},"Ben Alman")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"http://dmitry.baranovskiy.com/"},"Dmitry Baranovskiy")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"http://code.tutsplus.com/?s=javascript"},"nettuts"))),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Podcasts")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://javascriptair.com/"},"JavaScript Air")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://devchat.tv/js-jabber/"},"JavaScript Jabber"))),(0,r.kt)("h2",{id:"versioning"},"Versioning"),(0,r.kt)("p",null,"We use Major.Minor.Batch style for styles versioning. For the versions available, see the ","[tags on this repository]","."),(0,r.kt)("h2",{id:"authors"},"Authors"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Girish Dhote ",(0,r.kt)("a",{parentName:"li",href:"mailto:gdhote@wwnorton.com"},"gdhote@wwnorton.com")),(0,r.kt)("li",{parentName:"ul"},"W. W. Norton Digital Engineering Team")))}d.isMDXComponent=!0}}]);